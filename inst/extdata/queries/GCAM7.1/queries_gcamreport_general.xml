<?xml version="1.0" encoding="UTF-8"?>
<queries>
   <aQuery>
      <all-regions />
        <gdpQueryBuilder title="GDP MER by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">nationalAccount[@year]</axis2>
            <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">nationalAccount/account[@name = 'GDP']/node()</xPath>
            <comments/>
        </gdpQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
		<gdpQueryBuilder title="GDP per capita PPP by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">nationalAccount[@year]</axis2>
            <xPath buildList="true" dataName="gdp-per-capita-ppp" group="false" sumAll="false">nationalAccount/account[@name = 'gdp-per-capita-ppp']/node()</xPath>
            <comments/>
        </gdpQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <demographicsQuery title="population by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">populationMiniCAM</axis2>
         <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
         <comments />
      </demographicsQuery>
   </aQuery>
   <aQuery>
      <demographicsQuery title="subregional population">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">subregional-population</axis2>
         <xPath buildList="true" dataName="subregional-population" group="false" sumAll="false">gcam-consumer/subregional-population/node()</xPath>
         <comments/>
   </demographicsQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <demographicsQuery title="subregional income">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">subregional-percapita-income</axis2>
            <xPath buildList="true" dataName="subregional-percapita-income" group="false" sumAll="false">gcam-consumer/subregional-percapita-income/node()</xPath>
            <comments/>
      </demographicsQuery>
   </aQuery>

   <aQuery>
      <all-regions />
      <supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[
              
        declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
              let $scn := $parent/ancestor::scenario,
                    $rgn := $parent (: /ancestor::region :)
               return
                    document { element scenario {
                                 $scn/@*,
                               element region {
                                  $rgn/@*,
                                  $append
                               }
                              }
               }
              (: I can get by with just the scenario and region
             let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
              return
              if(local-name($parent) != 'scenario')
              then local:append-heirarchy($parent/parent::*, $new_node)
              else document { $new_node } :)
           }; 
           declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
          if(empty($outputNameQueue)) then $coefs
          else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded oil', 'traded coal', 'traded natural gas', 'traded Afr_MidE pipeline gas', 'traded LA pipeline gas', 'traded PAC pipeline gas', 'traded N.Amer pipeline gas', 'traded RUS pipeline gas', 'traded EUR pipeline gas', 'traded LNG', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol', 'regional woodpulp for energy'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
               else
             let $outputName := $outputNameQueue[1],
                 $newOutputNameQueue := remove($outputNameQueue, 1),
                 $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                 $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                               return $out/following-sibling::*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
                 $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                  return element output {
                                      attribute name { $out/following-sibling::keyword/@primary-renewable },
                                      $out/child::*
                                  },
                 $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                   return element output {
                                              attribute vintage { $vintage },
                                              text {
                                                  sum($useOutputs/physical-output[@vintage=$vintage])
                                              }
                                          },
                $new_coefs := $coefs | element sector {
                                     attribute name { $outputName },
                                     for $input in distinct-values($useInputs/@name)
                                     return element input {
                                                attribute name { $input },
                                                for $outputSum in $totalOutputSum
                                                let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                where $inputSum > 0
                                                return element coef {
                                                           attribute vintage { $outputSum/@vintage },
                                                           text { $inputSum div $outputSum }
                                                       }
                                             },
                                     for $input in distinct-values($renewOutputs/@name)
                                     return element input {
                                                attribute name { concat($input, ' renewable') },
                                                attribute is-renewable { true() },
                                                for $outputSum in $totalOutputSum
                                                let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                where $inputSum > 0
                                                return element coef {
                                                           attribute vintage { $outputSum/@vintage },
                                                           text { $inputSum div $outputSum }
                                                       }
                                             }
                                 }
                 return 
                       local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
};
 declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
     for $sector in $coefs/@name
     let $currSector := $currTree/*[@type='sector' and @name=$sector],
         $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
         $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
         $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                   return element output {
                                              attribute vintage { $vintage },
                                              text {
                                                  sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                              }
                                          }
     return if(exists($useInputsCCS)) then
         element sector {
                                     attribute name { $sector },
                                     $coefs[@name=$sector]/input[@is-renewable],
                                     for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                     return element input {
                                                attribute name { $input },
                                                for $outputSum in $totalOutputSum
                                                let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                    $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                return (element coef {
                                                           attribute vintage { $outputSum/@vintage },
                                                           text { $inputSum div $outputSum }
                                                       },
                                                       element coef_ccs {
                                                           attribute vintage { $outputSum/@vintage },
                                                           text { $inputSumCCS div $outputSum }
                                                       })
                                             }
                                 }
             else
                 $coefs[@name=$sector]
 };
 declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
     if(exists($coefs[@name=$outputName]) and sum($outputs) > 0.001) then
         for $input in $coefs[@name=$outputName]/input
         return local:apply-coefs($input/@name,
             for $vintage in distinct-values($outputs/@vintage)
             let $outputThisVintage := $outputs[@vintage=$vintage],
                 $firstOutput := $outputThisVintage[1],
                 $outputSum := sum($outputThisVintage),
                 $coefThisVintage := $input/coef[@vintage=$vintage]
             where $coefThisVintage > 0
             return element { local-name($firstOutput) } {
               $firstOutput/@*,
                 text{ $outputSum * $coefThisVintage }
                 }, $coefs, $isCCS)
             | local:apply-coefs($input/@name,
             for $vintage in distinct-values($outputs/@vintage)
             let $outputThisVintage := $outputs[@vintage=$vintage],
                 $firstOutput := $outputThisVintage[1],
                 $outputSum := sum($outputThisVintage),
                 $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
             where exists($coefThisVintage) and $coefThisVintage > 0
             return element { local-name($firstOutput) } {
               $firstOutput/@*,
                 text{ $outputSum * $coefThisVintage }
            }, $coefs, true())
     else if( sum($outputs) > 0.001) then
         element input {
             attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
             attribute type { 'input' },
             (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
             for $o in $outputs
             return element demand-physical { $o/@*, text{ $o/text() } }
         }
     else
         (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
         element input {
             attribute name { $outputName },
             attribute type { 'input' } (:,
             $outputs :)
         }
 };
declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
       unordered { 	
       let $regionsG := if(not($regions[1] = 'Global'))
               then $regions
               else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
       return
       for $scenario in $scenarios, 	    
       $region in $regionsG 	
       let $scenario_split := tokenize($scenario, ' '), 	    
      $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
          $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits', 'scrap', 'alumina', 'process heat paper', 'waste biomass for paper', 'process heat food processing', 'water_td_ind_W', 'water_td_ind_C'), @name))],
          $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
          $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
      return 
         for $inputName in distinct-values($currInputs/@name)
         return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
       } 
 };
local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
  
  
         ]]></xPath>
         <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
         <labelRewriteList append-values="false">
             <level name="input">
                 <rewrite from="water consumption CCS" to=""/>
                 <rewrite from="traditional biomass" to="j traditional biomass"/>
                 <rewrite from="seawater CCS" to=""/>
                 <rewrite from="traded EUR pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="coal CCS" to="c coal CCS"/>
                 <rewrite from="traded LNG" to="b natural gas"/>
                 <rewrite from="wind-H2 renewable" to="g wind"/>
                 <rewrite from="regional biomassOil CCS" to="d biomass CCS"/>
                 <rewrite from="traded coal" to="c coal"/>
                 <rewrite from="limestone" to=""/>
                 <rewrite from="seawater" to=""/>
                 <rewrite from="traded EUR pipeline gas" to="b natural gas"/>
                 <rewrite from="traded biomass CCS" to="d biomass CCS"/>
                 <rewrite from="traded PAC pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="geothermal-elect renewable CCS" to="i geothermal"/>
                 <rewrite from="hydro-elect renewable" to="f hydro"/>
                 <rewrite from="wind-elect renewable" to="g wind"/>
                 <rewrite from="nuclear-H2 renewable" to="e nuclear"/>
                 <rewrite from="crude oil" to="a oil"/>
                 <rewrite from="regional natural gas" to=""/>
                 <rewrite from="traded coal CCS" to="c coal CCS"/>
                 <rewrite from="natural gas CCS" to="b natural gas CCS"/>
                 <rewrite from="traded Afr_MidE pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="traded biomass" to="d biomass"/>
                 <rewrite from="traded RUS pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="traded PAC pipeline gas" to="b natural gas"/>
                 <rewrite from="regional woodpulp for energy" to="d biomass"/>
                 <rewrite from="regional woodpulp for energy CCS" to="d biomass CCS"/>
                 <rewrite from="geothermal-elect" to="i geothermal"/>
                 <rewrite from="traded Afr_MidE pipeline gas" to="b natural gas"/>
                 <rewrite from="water consumption" to=""/>
                 <rewrite from="renewable" to=""/>
                 <rewrite from="water withdrawals CCS" to=""/>
                 <rewrite from="coal" to="c coal"/>
                 <rewrite from="traded natural gas CCS" to="b natural gas CCS"/>
                 <rewrite from="traded RUS pipeline gas" to="b natural gas"/>
                 <rewrite from="regional corn for ethanol" to="d biomass"/>
                 <rewrite from="geothermal-elect renewable" to="i geothermal"/>
                 <rewrite from="crude oil CCS" to="a oil CCS"/>
                 <rewrite from="regional biomassOil" to="d biomass"/>
                 <rewrite from="wind-elect renewable CCS" to="g wind"/>
                 <rewrite from="regional corn for ethanol CCS" to="d biomass CCS"/>
                 <rewrite from="traded N.Amer pipeline gas" to="b natural gas"/>
                 <rewrite from="hydro-elect renewable CCS" to="f hydro"/>
                 <rewrite from="traded LA pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS"/>
                 <rewrite from="traded unconventional oil CCS" to="a oil CCS"/>
                 <rewrite from="elect_td_ind" to=""/>
                 <rewrite from="biomass CCS" to="d biomass CCS"/>
                 <rewrite from="traded oil" to="a oil"/>
                 <rewrite from="traded oil CCS" to="a oil CCS"/>
                 <rewrite from="exotic-elect" to="j breakthrough"/>
                 <rewrite from="biomass" to="d biomass"/>
                 <rewrite from="nuclear-elect renewable" to="e nuclear"/>
                 <rewrite from="traded N.Amer pipeline gas CCS" to="b natural gas CCS"/>
                 <rewrite from="solar-elect renewable CCS" to="h solar"/>
                 <rewrite from="traded unconventional oil" to="a oil"/>
                 <rewrite from="regional sugar for ethanol" to="d biomass"/>
                 <rewrite from="natural gas" to="b natural gas"/>
                 <rewrite from="solar-elect renewable" to="h solar"/>
                 <rewrite from="traded natural gas" to="b natural gas"/>
                 <rewrite from="regional sugarbeet for ethanol" to="d biomass"/>
                 <rewrite from="water withdrawals" to=""/>
                 <rewrite from="solar-H2 renewable" to="h solar"/>
                 <rewrite from="global solar resource" to="h solar"/>
                 <rewrite from="wind-elect" to="g wind"/>
                 <rewrite from="traded LNG CCS" to="b natural gas CCS"/>
                 <rewrite from="nuclear-elect renewable CCS" to="e nuclear"/>
                 <rewrite from="traded LA pipeline gas" to="b natural gas"/>
             </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="resource production">
         <axis1 name="resource">resource</axis1>
         <axis2 name="Year">output</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']//output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="resource production by tech and vintage">
         <axis1 name="technology">technology[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']/*[@type='subresource']/
     *[@type='technology']/output-primary[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments/>
         <showAttribute attribute-name="year" level="technology"/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="regional primary energy prices">
         <axis1 name="fuel">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='regional oil' or @name='regional natural gas'
     or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII')]/
     cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
       <supplyDemandQuery title="elec gen by gen tech">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and
    (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use')]/
    *[@type='subsector']/*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
    *[@type='output' and (@name='electricity' or @name='elect_td_bld')]/
    physical-output/node()</xPath>
         <comments/>
     </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="elec gen by gen tech and cooling tech and vintage">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
       contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
       *[@type='subsector' and not (@name='elect_td_bld')]/
       *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                        or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                        or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                        or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                        or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                        or @name='CSP' or @name='CSP_storage')]/
       *[@type='output']/physical-output/node()
    </xPath>
         <comments/>
         <labelRewriteList append-values="false">
             <level name="sector">
                 <rewrite from="elec_Gen_III" to="electricity"/>
                 <rewrite from="elec_CSP_storage" to="electricity"/>
                 <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                 <rewrite from="elec_geothermal" to="electricity"/>
                 <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                 <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                 <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                 <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                 <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                 <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                 <rewrite from="elec_coal (IGCC)" to="electricity"/>
                 <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                 <rewrite from="elec_gas (CC)" to="electricity"/>
                 <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                 <rewrite from="elec_coal (conv pul)" to="electricity"/>
                 <rewrite from="elec_CSP" to="electricity"/>
                 <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                 <rewrite from="elec_biomass (conv)" to="electricity"/>
                 <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
             </level>
             <level name="subsector">
                 <rewrite from="gas (CC)" to="gas"/>
                 <rewrite from="CSP" to="solar"/>
                 <rewrite from="gas (CC CCS)" to="gas"/>
                 <rewrite from="coal (IGCC CCS)" to="coal"/>
                 <rewrite from="biomass (conv)" to="biomass"/>
                 <rewrite from="Gen_II_LWR" to="nuclear"/>
                 <rewrite from="coal (conv pul)" to="coal"/>
                 <rewrite from="coal (IGCC)" to="coal"/>
                 <rewrite from="biomass (conv CCS)" to="biomass"/>
                 <rewrite from="gas (steam/CT)" to="gas"/>
                 <rewrite from="CSP_storage" to="solar"/>
                 <rewrite from="biomass (IGCC)" to="biomass"/>
                 <rewrite from="Gen_III" to="nuclear"/>
                 <rewrite from="coal (conv pul CCS)" to="coal"/>
                 <rewrite from="refined liquids (CC)" to="refined liquids"/>
                 <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                 <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                 <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
             </level>
         </labelRewriteList>
         <showAttribute attribute-name="year" level="technology"/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
			<supplyDemandQuery title="refined liquids production by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'refining')]/*[@type='subsector']/
       *[@type='technology']/output-primary[@type='output']/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="hydrogen production by tech">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 wholesale dispensing' or @name='H2 industrial')]/
    *[@type='subsector' and not (@name='H2 delivery')]/*[@type='technology']/*[@type='output' (:collapse:)]/
    physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="gas production by tech">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
    *[@type='technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="final energy consumption by sector and fuel">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
 (exists(child::keyword/@final-energy)))]//*[@type='input' and
 not(@name='limestone' or @name='process heat cement' or @name='process heat food processing' or @name='industrial energy use' or @name='process heat paper' or @name='waste biomass for paper' or 
     @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
 demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
             <level name="input">
                 <rewrite from="elect_td_bld" to="electricity"/>
                 <rewrite from="regional coal" to="coal"/>
                 <rewrite from="H2 industrial" to="hydrogen"/>
                 <rewrite from="refined liquids enduse" to="refined liquids"/>
                 <rewrite from="elect_td_trn" to="electricity"/>
                 <rewrite from="delivered coal" to="coal"/>
                 <rewrite from="delivered gas" to="gas"/>
                 <rewrite from="wholesale gas" to="gas"/>
                 <rewrite from="H2 wholesale dispensing" to="hydrogen"/>
                 <rewrite from="H2 retail dispensing" to="hydrogen"/>
                 <rewrite from="regional biomass" to="biomass"/>
                 <rewrite from="H2 retail delivery" to="hydrogen"/>
                 <rewrite from="elect_td_ind" to="electricity"/>
                 <rewrite from="delivered biomass" to="biomass"/>
                 <rewrite from="refined liquids industrial" to="refined liquids"/>
                 <rewrite from="H2 wholesale delivery" to="hydrogen"/>
  <rewrite from="global solar resource" to="solar"/>
  <rewrite from="regional woodpulp for energy" to="biomass"/>
             </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="building floorspace">
         <axis1 name="building">gcam-consumer[@name]</axis1>
         <axis2 name="Year">floorspace[@year]</axis2>
         <xPath buildList="true" dataName="floorspace" group="false" sumAll="false">gcam-consumer//floorspace/node()</xPath>
         <comments/>
     </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="industry primary output by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
output-primary/physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="industry final energy by tech and fuel">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]/
*[@type='subsector']/*[@type='technology']/
*[@type='input' and (@name='delivered biomass' or @name='delivered coal' or @name='district heat' or
@name='H2 wholesale delivery' or @name='H2 wholesale dispensing' or @name='H2 industrial' or
@name='elect_td_ind' or @name='wholesale gas' or @name='regional woodpulp for energy' or
@name='refined liquids industrial' or @name='global solar resource')]/demand-physical/node()</xPath>
         <comments>paper technology direct input assigned to electricity</comments>
         <labelRewriteList append-values="false">
             <level name="technology">
                 <rewrite from="paper" to="electricity"/>
             </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="transport final energy by mode and fuel">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
    *[@type='subsector']//*[@type='input' and not (@name='renewable')]/
    demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="fuel prices to transport">
         <axis1 name="fuel">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='delivered gas' or @name='delivered coal' or @name='elect_td_trn'
    or @name='refined liquids enduse' or @name='H2 wholesale dispensing' or @name='H2 retail dispensing')]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="elec td inputs and outputs">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='electricity_net_ownuse' or
    @name='elect_td_bld' or @name='elect_td_ind' or @name='elect_td_trn')]/
    *[@type='subsector' (:collapse:)]/*[@type='technology' (:collapse:) and not (@name='rooftop_pv')]/
    *[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments>excludes rooftop pv</comments>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="ag production by crop type">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]//
 output-primary/physical-output/node()</xPath>
         <comments>primary output only (no residue biomass)</comments>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="demand balances by crop commodity">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
     (@name='regional corn' or @name='regional fibercrop' or @name='regional fruits' or @name='regional legumes'
        or @name='regional misccrop' or @name='regional nuts_seeds' or @name='regional oilcrop' or @name='regional othergrain'
        or @name='regional oilpalm' or @name='regional rice' or @name='regional root_tuber'
        or @name='regional soybean' or @name='regional sugarcrop' or @name='regional vegetables' or @name='regional wheat'
        or @name='FodderGrass' or @name='FodderHerb' or @name='Forest' or @name='Pasture' or @name='regional sawnwood' or @name='regional woodpulp')]/
        demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="demand balances by meat and dairy commodity">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
     (@name='regional beef' or @name='regional dairy' or @name='regional pork' or @name='regional poultry' or @name='regional sheepgoat' or @name='OtherMeat_Fish')]/
     demand-physical/node()</xPath>
         <comments/>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <query title="LUC emissions by region">
         <axis1 name="LandLeaf">LandLeaf</axis1>
         <axis2 name="Year">land-use-change-emission[@year]</axis2>
         <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
         land-use-change-emission[@year&gt;1970]/text()</xPath>
         <comments/>
      </query>
   </aQuery>
   <aQuery>
      <all-regions />
      <query title="aggregated land allocation">
         <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
         <axis2 name="Year">land-allocation[@year]</axis2>
         <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
             <level name="LandLeaf">
                 <rewrite from="Vegetables" to="crops"/>
                 <rewrite from="OtherGrainC4" to="crops"/>
                 <rewrite from="PalmFruit" to="crops"/>
                 <rewrite from="FiberCrop" to="crops"/>
                 <rewrite from="NutsSeeds" to="crops"/>
                 <rewrite from="ProtectedGrassland" to="grass"/>
                 <rewrite from="Fruits" to="crops"/>
                 <rewrite from="FodderHerbC4" to="crops"/>
                 <rewrite from="ProtectedUnmanagedForest" to="forest (unmanaged)"/>
                 <rewrite from="biomassTree" to="biomass"/>
                 <rewrite from="MiscCropTree" to="crops"/>
                 <rewrite from="Legumes" to="crops"/>
                 <rewrite from="RockIceDesert" to="rock and desert"/>
                 <rewrite from="RootTuber" to="crops"/>
                 <rewrite from="OilCrop" to="crops"/>
                 <rewrite from="Shrubland" to="shrubs"/>
                 <rewrite from="UnmanagedPasture" to="pasture (other)"/>
                 <rewrite from="Wheat" to="crops"/>
                 <rewrite from="CornC4" to="crops"/>
                 <rewrite from="Grassland" to="grass"/>
                 <rewrite from="ProtectedUnmanagedPasture" to="pasture (other)"/>
                 <rewrite from="FodderHerb" to="crops"/>
                 <rewrite from="ProtectedUnmanagedSoftwood_Forest" to="forest (unmanaged)"/>
                 <rewrite from="MiscCrop" to="crops"/>
                 <rewrite from="OtherGrain" to="crops"/>
                 <rewrite from="Soybean" to="crops"/>
                 <rewrite from="FodderGrass" to="crops"/>
                 <rewrite from="OilPalm" to="crops"/>
                 <rewrite from="OtherArableLand" to="otherarable"/>
                 <rewrite from="OilPalmTree" to="crops"/>
                 <rewrite from="Hardwood_Forest" to="forest (managed)"/>
                 <rewrite from="Rice" to="crops"/>
                 <rewrite from="UnmanagedHardwood_Forest" to="forest (unmanaged)"/>
                 <rewrite from="NutsSeedsTree" to="crops"/>
                 <rewrite from="OilCropTree" to="crops"/>
                 <rewrite from="UrbanLand" to="urban"/>
                 <rewrite from="ProtectedUnmanagedHardwood_Forest" to="forest (unmanaged)"/>
                 <rewrite from="Corn" to="crops"/>
                 <rewrite from="FruitsTree" to="crops"/>
                 <rewrite from="ProtectedShrubland" to="shrubs"/>
                 <rewrite from="SugarCrop" to="crops"/>
                 <rewrite from="UnmanagedForest" to="forest (unmanaged)"/>
                 <rewrite from="SugarCropC4" to="crops"/>
                 <rewrite from="Pasture" to="pasture (grazed)"/>
                 <rewrite from="Forest" to="forest (managed)"/>
                 <rewrite from="biomassGrass" to="biomass"/>
                 <rewrite from="Softwood_Forest" to="forest (managed)"/>
                 <rewrite from="UnmanagedSoftwood_Forest" to="forest (unmanaged)"/>
                 <rewrite from="Tundra" to="tundra"/>
             </level>
         </labelRewriteList>
      </query>
   </aQuery>
   <aQuery>
      <all-regions />
      <marketQuery title="CO2 prices">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true() and contains(@name,'CO2')]/price/node()</xPath>
         <comments />
      </marketQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="CO2 emissions by sector (no bio) (excluding resource production)">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">emissions[@year]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[
              
     declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
     let $scn := $parent/ancestor::scenario,
     $rgn := $parent (: /ancestor::region :)
     return
     document { element scenario {
     $scn/@*,
     element region {
     $rgn/@*,
     $append
     }
     }
     }
     (: I can get by with just the scenario and region
     let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
     return
     if(local-name($parent) != 'scenario')
     then local:append-heirarchy($parent/parent::*, $new_node)
     else document { $new_node } :)
     }; 
     declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
     let $carbonCoefs := (
     <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="regional woodpulp for energy">23</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
     <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
     $currCoef := $carbonCoefs[@name=$good]/text()
     return if(exists($currCoef)) then $currCoef else 0.0
     };
     
     
     declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
     not(local:get-carbon-coef($good) = 0.0)
     };
     declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
     if(empty($inputNameQueue)) then $coefs
     else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
     $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
     then 
     local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
     else
     let $inputName := $inputNameQueue[1],
     $newInputNameQueue := remove($inputNameQueue, 1),
     $useInputs := $currTree//*[@type='input' and @name=$inputName],
     $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
     $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
     return element input {
     attribute vintage { $vintage },
     text {
     sum($useInputs/demand-physical[@vintage=$vintage])
     }
     },
     $new_coefs := if(empty($useSectors)) then
     $coefs
     else
     $coefs | element sector {
     attribute name { $inputName },
     for $output in $useSectors
     return element output {
     attribute name { $output },
     for $inputSum in $totalInputSum
     let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
     $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
     $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
     $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
     local:get-carbon-coef($output)
     return (element share {
     attribute vintage { $inputSum/@vintage },
     text { $outputSum div $inputSum }
     }, element carbon_ratio {
     attribute vintage { $inputSum/@vintage },
     text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
     })
     }
     }
     return 
     local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
     };
     declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
     if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
     for $output in $coefs[@name=$outputName]/output
     let $emiss_go := for $year in distinct-values($emissions/@year)
     let $emissThisVintage := $emissions[@year=$year],
     $firstEmiss := $emissThisVintage[1],
     $emissSum := sum($emissThisVintage),
     $shareThisVintage := $output/share[@vintage=$year],
     $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
     $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
     where $coefThisVintage > 0
     return element { local-name($firstEmiss) } {
     $firstEmiss/@*,
     text{ $emissSum * $coefThisVintage }
     },
     $emiss_stay := for $year in distinct-values($emissions/@year)
     let $emissThisVintage := $emissions[@year=$year],
     $firstEmiss := $emissThisVintage[1],
     $emissSum := sum($emissThisVintage),
     $shareThisVintage := $output/share[@vintage=$year],
     $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
     $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
     where $coefThisVintage > 0
     return element { local-name($firstEmiss) } {
     $firstEmiss/@*,
     text{ $emissSum * $coefThisVintage }
     }
     return local:apply-coefs($output/@name, $emiss_go, $coefs) |
     element sector {
     attribute name { $output/@name},
     attribute type { 'sector' },
     $emiss_stay
     }
     else if( abs(sum($emissions)) > 0.001) then
     element sector {
     attribute name { $outputName },
     attribute type { 'sector' },
     $emissions
     }
     else
     (: These are the residuals from chasing simulenaties, I've left this here
     for debuging purposes :)
     element sector {
     attribute name { $outputName },
     attribute type { 'sector' }(:,
     $emissions:)
     }
     };
     declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
     (:unordered { :) 	
     let $regionsG := if(not($regions[1] = 'Global'))
     then $regions
     else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
     return
     for $scenario in $scenarios, 	    
     $region in $regionsG 	
     let $scenario_split := tokenize($scenario, ' '), 	    
     $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
     $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol' or @name='regional woodpulp for energy')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
     $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol' or @name='regional woodpulp for energy')],
     $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
     $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
     return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
     return ($sector_emiss, $downstream_emiss )
     (:  } :)
     };
     local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
     
  
         ]]></xPath>
         <comments/>
         <labelRewriteList append-values="false">
             <level name="sector">
                 <rewrite from="elec_Gen_III" to="electricity"/>
                 <rewrite from="elec_CSP_storage" to="electricity"/>
                 <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                 <rewrite from="elec_geothermal" to="electricity"/>
                 <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                 <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                 <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                 <rewrite from="elec_coal (IGCC)" to="electricity"/>
                 <rewrite from="elec_gas (CC)" to="electricity"/>
                 <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                 <rewrite from="elec_coal (conv pul)" to="electricity"/>
                 <rewrite from="elec_CSP" to="electricity"/>
                 <rewrite from="elec_biomass (conv)" to="electricity"/>
             </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="CO2 emissions by sector (excluding resource production)">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG' and @name != 'CO2' and @name != 'CO2_FUG']/emissions/node()</xPath>
         <comments />
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="CO2 emissions by region">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)] :)//*[((@name='CO2' or @name = 'CO2_FUG'))]/emissions/node()</xPath>
         <comments />
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="CO2 emissions by tech (excluding resource production)">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
     CO2/emissions/node()</xPath>
         <comments />
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="CO2 sequestration by tech">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions-sequestered</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']/*[@type='technology']//
     CO2/emissions-sequestered/node()</xPath>
         <comments />
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <ClimateQuery title="CO2 concentrations">
         <axis1 name="CO2-concentration">none</axis1>
         <axis2 name="Year">CO2-concentration[@year]</axis2>
         <xPath buildList="true" dataName="CO2-concentration" group="false" sumAll="false">climate-model/CO2-concentration/text()</xPath>
         <comments />
      </ClimateQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <ClimateQuery title="global mean temperature">
         <axis1 name="temperature">none</axis1>
         <axis2 name="Year">global-mean-surface-temperature[@year]</axis2>
         <xPath buildList="true" dataName="global-mean-temperature" group="false" sumAll="false">climate-model/global-mean-surface-temperature/text()</xPath>
         <comments>Returns global mean surface temp anomaly relative to the 1850-1900 mean.
Also available is global mean air temperature; in both climate model native or relative to 1850-1900 mean.
A user can adjust the query to search for any of:
* global-mean-surface-temperature
* global-mean-air-temperature
* global-mean-surface-temperature-native
* global-mean-air-temperature-native</comments>
      </ClimateQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <ClimateQuery title="total climate forcing">
         <axis1 name="forcing-total">none</axis1>
         <axis2 name="Year">forcing-total[@year]</axis2>
         <xPath buildList="true" dataName="forcing-total" group="false" sumAll="false">climate-model/forcing-total/text()</xPath>
         <comments />
      </ClimateQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="prices by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type = 'sector']/cost/text()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="costs by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="Price" group="false" sumAll="false">*[@type='sector' and (local-name()!='AgSupplySector')]/*[@type = 'subsector']/cost/text()</xPath>
         <comments>Excludes AgSupplySubsector costs, where data written out are no meaningful</comments>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <marketQuery title="supply of all markets">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/supply/node()</xPath>
         <comments />
      </marketQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="inputs by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input']/demand-physical/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="transport service output by mode">
         <axis1 name="mode">subsector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
    *[@type='subsector']//*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/
    physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="nonCO2 emissions by resource production">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG' and @name != 'CO2' and @name != 'CO2_FUG']/emissions/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
             <level name="GHG">
                 <rewrite from="CO2_FUG" to="CO2"/>
             </level>
         </labelRewriteList>
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
  		 <supplyDemandQuery title="regional iron and steel sources">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'regional iron and steel')]/*[@type='subsector']//*[@type='input']/demand-physical/node()</xPath>
         <comments/>
    	</supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
			<supplyDemandQuery title="traded iron and steel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'traded iron and steel')]/*[@type='subsector']//*[@type='input']/demand-physical/node()</xPath>
            <comments/>
			</supplyDemandQuery>
   </aQuery>
</queries>