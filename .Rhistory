final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|CH4*"),
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("Reference", testResult)
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_test_scenarios7.dat"),
final_year = 2050,
scenarios = "CP_EI_recovery",
desired_regions = "USA",
desired_variables = "Emissions|CH4*",
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("CP_EI_recovery", testResult)
library(gcamreport)
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.5_test.dat",
scenarios = c("dummy1", "dummy2", "Reference"),
launch_ui = FALSE
),
"The desired scenarios dummy1, dummy2 are not present in the database"
)
covr::package_coverage() -> x;print(x);covr::to_cobertura(x, file = "coverage.xml")
covr::package_coverage() -> x;print(x);covr::to_cobertura(x, file = "coverage.xml")
library(gcamreport)
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
x
covr::package_coverage() -> x
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.9_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "China",
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
library(gcamreport)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.9_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "China",
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
CO2_market_filteredReg <- filter_data_regions(CO2_market)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.2.RData")))
testthat::expect_equal(CO2_market_filteredReg, testResult)
covr::package_coverage() -> x
covr::package_coverage() -> x
CO2_market
gcamreport::CO2_market
covr::package_coverage() -> x
desired_regions <- 'All'
CO2_market_filteredReg <- filter_data_regions(gcamreport::CO2_market)
covr::package_coverage() -> x
desired_regions <<- 'All'
covr::package_coverage() -> x
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.2.RData")))
testResult
covr::package_coverage() -> x
x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
test_regions <- available_regions(T)
testResult_regions <- c(
"Africa_Eastern", "Africa_Northern", "Africa_Southern",
"Africa_Western", "Argentina", "Australia_NZ",
"Brazil", "Canada", "Central America and Caribbean",
"Central Asia", "China", "Colombia",
"European Free Trade Association", "EU-12", "EU-15",
"Europe_Eastern", "Europe_Non_EU", "India",
"Indonesia", "Japan", "Mexico",
"Middle East", "Pakistan", "Russia",
"South Africa", "South America_Northern", "South America_Southern",
"South Asia", "South Korea", "Southeast Asia",
"Taiwan", "USA", "World"
)
testthat::expect_equal(test_regions, testResult_regions)
library(gcamreport)
test_regions <- available_regions(T)
testResult_regions <- c(
"Africa_Eastern", "Africa_Northern", "Africa_Southern",
"Africa_Western", "Argentina", "Australia_NZ",
"Brazil", "Canada", "Central America and Caribbean",
"Central Asia", "China", "Colombia",
"European Free Trade Association", "EU-12", "EU-15",
"Europe_Eastern", "Europe_Non_EU", "India",
"Indonesia", "Japan", "Mexico",
"Middle East", "Pakistan", "Russia",
"South Africa", "South America_Northern", "South America_Southern",
"South Asia", "South Korea", "Southeast Asia",
"Taiwan", "USA", "World"
)
testthat::expect_equal(test_regions, testResult_regions)
test_continents <- available_continents(T)
testResult_continents <- c("MAF", "LAM", "OECD90", "REF", "ASIA", "World")
testthat::expect_equal(test_continents, testResult_continents)
test_variables <- available_variables(T)
testResult_variables <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test7.1.RData")))
testthat::expect_equal(test_variables, testResult_variables)
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.1_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_continents = "OECD90",
desired_variables = available_variables(F)[c(1, 3, 10, 11)],
launch_ui = FALSE
)
testthat::expect_equal(unique(report$Variable), c(
"Agricultural Demand",
"Agricultural Demand|Crops|Energy",
"Agricultural Production",
"Capacity Additions|Electricity|Biomass"
))
testthat::expect_equal(unique(report$Region), c(
"Australia_NZ", "Canada", "EU-12", "EU-15",
"Europe_Non_EU", "European Free Trade Association",
"Japan", "USA", "World"
))
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.2_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_continents = "OECD90",
desired_variables = "Emissions*",
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test7.2.RData")))
testthat::expect_equal(unique(report$Variable), testResult)
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.3_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "USA",
desired_variables = "Price|Carbon",
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test7.3.RData")))
testthat::expect_equal(unique(report$Variable), testResult)
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.4_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "USA",
desired_variables = "Price|Carbon*",
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test7.4.RData")))
testthat::expect_equal(unique(report$Variable), testResult)
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
library(gcamreport)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.3_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "USA",
desired_variables = "Price|Carbon",
launch_ui = FALSE
)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.3_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "USA",
desired_variables = "Price|Carbon",
launch_ui = FALSE
)
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
print(x)
covr::to_cobertura(x, file = "coverage.xml")
report <- covr::report(coverage)
report <- covr::report(x)
# do_unmount_tree with regions
testResult1.2 <- do_unmount_tree(testExpect1, 'variables')
library(gcamreport)
# do_unmount_tree with regions
testResult1.2 <- do_unmount_tree(testExpect1, 'variables')
testExpect1 <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_1.RData")))
# do_unmount_tree with regions
testResult1.2 <- do_unmount_tree(testExpect1, 'variables')
testResult1.2
testExpect1
# do_unmount_tree with regions
testResult1.2 <- do_unmount_tree(testExpect1, 'regions')
testResult1.2
base_tree = testExpect1
length(length(base_tree) > 0)
testResult1.2
length(base_tree)
# transform dataset to list of items with delimiter |
ll <- rrapply(
base_tree,
classes = "numeric",
how = "flatten",
options = list(namesep = "|", simplify = FALSE)
)
library(rrapply)
# transform dataset to list of items with delimiter |
ll <- rrapply(
base_tree,
classes = "numeric",
how = "flatten",
options = list(namesep = "|", simplify = FALSE)
)
ll <- names(ll)
ll
base_tree
source("~/IAM_COMPACT/gcamreport/R/app_functions.R")
## -- load gcamreport library.
devtools::load_all()
## -- store the database path, name, and scenarios in a variable.
datapath <- "examples/example3.RData"
## -- launch the user interface
launch_gcamreport_ui(data_path = datapath)
# do_unmount_tree with regions
testResult1.2 <- do_unmount_tree(get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test_unmount_tree.RData"))), 'regions')
testResult1.2
testResult1.2->testExpect1.2
save(testExpect1.2, file = 'test_ui_1.2.RData')
getwd()
testExpect1.2 <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_1.2.RData")))
testExpect1.2
testResult1.2
testthat::expect_equal(testResult1.2, testExpect1.2)
## -- load gcamreport library.
devtools::load_all()
## -- store the database path, name, and scenarios in a variable.
datapath <- "examples/example3.RData"
## -- launch the user interface
launch_gcamreport_ui(data_path = datapath)
# do_unmount_tree with variables
testResult2.2 <- do_unmount_tree(get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test_unmount_tree_variables.RData"))), 'variables')
testResult2.2
testExpect2.2 <- testResult2.2
save(testExpect2.2, file = 'test_ui_2.2.RData')
testExpect2.2 <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_2.2.RData")))
testExpect2.2
reset_first_load()
cols.global
test_ui_3.a <- cols.global
save(test_ui_3.a, file = 'test_ui_3.a.RData')
tree_vars
test_ui_3.b <- tree_vars
save(test_ui_3.b, file = 'test_ui_3.b.RData')
all_varss
test_ui_3.c <- all_varss
save(test_ui_3.c, file = 'test_ui_3.c.RData')
testthat::expect_equal(firstLoad, TRUE)
testthat::expect_equal(firstReg, TRUE)
testthat::expect_equal(firstVars, TRUE)
testthat::expect_equal(noReg, FALSE)
testthat::expect_equal(noVars, FALSE)
testthat::expect_equal(updatedVars, FALSE)
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
tree_reg
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData")))
cols.global
reset_first_load()
tree_reg
cols.global
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
tree_reg
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData")))
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData")))
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
testthat::expect_equal(all_varss,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.c.RData"))))
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
testthat::expect_equal(all_varss,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.c.RData"))))
reset_first_load()
tree_reg
test_ui_3.b <- tree_reg
test_ui_3.a <- tree_reg
save(test_ui_3.a, file = 'test_ui_3.a.RData')
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
check_user_choices_plot(vars, scen = c("scen1", "scen2"), years = c("year1", "year2"), reg = NULL, grouped = TRUE)
check_user_choices_plot(vars = 'var1', scen = c("scen1", "scen2"), years = c("year1", "year2"), reg = NULL, grouped = TRUE)
check_user_choices_plot(vars = 'var1', scen = c("scen1", "scen2"), years = NULL, reg = 'Africa', grouped = TRUE)
expect_error(
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE),
'ERROR: Select at least one year please.'
)
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE)
expect_error(
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE),
'ERROR: Select at least one scenario  please.'
)
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE)
expect_error(
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE),
'ERROR: Select at least one scenario please.'
)
expect_error(
launch_gcamreport_ui(),
"Specify either the dataset or the dataset path to be considered."
)
expect_error(
launch_gcamreport_ui("dummy1", "dummy2"),
"Specify either the dataset or the dataset path to be considered, not both"
)
expect_error(
check_user_choices_plot(vars = 'var1', scen = c("scen1", "scen2"), years = NULL,
reg = 'Africa', grouped = TRUE),
'ERROR: Select at least one year please.'
)
expect_error(
check_user_choices_plot(vars = 'var1', scen = NULL, years = 'year1',
reg = 'Africa', grouped = TRUE),
'ERROR: Select at least one scenario please.'
)
errorMessage1 <- check_user_choices_plot(vars = 'var1', scen = c("scen1", "scen2"),
years = NULL, reg = 'Africa', grouped = TRUE)
testthat::expect_equal(errorMessage1, 'ERROR: Select at least one year please.')
errorMessage2 <- check_user_choices_plot(vars = 'var1', scen = NULL,
years = 'year', reg = 'Africa', grouped = TRUE)
testthat::expect_equal(errorMessage2, 'ERROR: Select at least one scenario please.')
errorMessage3 <- check_user_choices_plot(vars = NULL, scen = 'scen1',
years = 'year', reg = 'Africa', grouped = TRUE)
errorMessage3
testthat::expect_equal(errorMessage3, 'ERROR: Select at least one variable  please.')
testthat::expect_equal(errorMessage3, 'ERROR: Select at least one variable please.')
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/gcamv7.0_test.dat"),
scenarios = "Reference3",
desired_regions = "dummy region",
desired_continents = "dummy continent",
launch_ui = FALSE
),
"The desired scenario Reference3 is not present in the loaded project."
)
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/gcamv7.0_test.dat"),
scenarios = "Reference3",
desired_regions = "dummy region",
launch_ui = FALSE
),
"The desired scenario Reference3 is not present in the loaded project."
)
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/gcamv7.0_test.dat"),
scenarios = "Reference3",
desired_regions = "EU-12",
launch_ui = FALSE
),
"The desired scenario Reference3 is not present in the loaded project."
)
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
scenarios = "Reference3",
desired_regions = "EU-12",
launch_ui = FALSE
),
"The desired scenario Reference3 is not present in the loaded project."
)
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
scenarios = c("Reference3", "Reference4"),
desired_regions = "EU-12",
launch_ui = FALSE
)
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
scenarios = c("Reference3", "Reference4"),
desired_regions = "EU-12",
launch_ui = FALSE
),
"The desired scenario Reference3, Reference4 are not present in the loaded project."
)
expect_error(
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
scenarios = c("Reference3", "Reference4"),
desired_regions = "EU-12",
launch_ui = FALSE
),
"The desired scenarios Reference3, Reference4 are not present in the loaded project."
)
launch_gcamreport_ui(data_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))
file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData")
launch_gcamreport_ui(data_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_launch_ui.RData"))
launch_gcamreport_ui(data_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test_launch_ui.RData"))
sdata
test_ui_4.1 <- sdata
save(test_ui_4.1, 'test_ui_4.1.RData')
test_ui_4.a <- sdata
test_ui_4.a
save(test_ui_4.a, file = 'test_ui_4.a.RData')
available_years
testthat::expect_equal(available_years, c(2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050))
cols.global
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
tree_vars
testthat::expect_equal(tree_vars,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
testthat::expect_equal(tree_vars,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
testthat::expect_equal(tree_vars,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.c.RData"))))
tree_vars-> test_ui_4.c
save(test_ui_4.c, file = 'test_ui_4.c.RData')
tree_reg -> test_ui_4.d
save(test_ui_4.d, file = 'test_ui_4.d.RData')
all_varss
testthat::expect_equal(all_varss,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.c.RData"))))
test_that("Test4. launch ui", {
launch_gcamreport_ui(data_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test_launch_ui.RData"))
testthat::expect_equal(available_years, c(2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050))
testthat::expect_equal(sdata,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.a.RData"))))
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.b.RData"))))
testthat::expect_equal(tree_vars,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.c.RData"))))
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.d.RData"))))
testthat::expect_equal(all_varss,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.e.RData"))))
})
covr::package_coverage() -> x
covr::package_coverage() -> x
setwd("~/IAM_COMPACT/gcamreport")
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::package_coverage() -> x
test_that("Test3. reset", {
reset_first_load()
testthat::expect_equal(firstLoad, TRUE)
testthat::expect_equal(firstReg, TRUE)
testthat::expect_equal(firstVars, TRUE)
testthat::expect_equal(noReg, FALSE)
testthat::expect_equal(noVars, FALSE)
testthat::expect_equal(updatedVars, FALSE)
testthat::expect_equal(tree_reg,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.a.RData"))))
testthat::expect_equal(cols.global,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.b.RData"))))
testthat::expect_equal(all_varss,
get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_3.c.RData"))))
})
covr::package_coverage() -> x
sdata <<- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.a.RData"))))
sdata <<- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/test_ui_4.a.RData")))
sdata <<- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test_ui_3.RData")))
covr::package_coverage() -> x
x
covr::package_coverage() -> x
covr::package_coverage() -> x
x
covr::to_cobertura(x, file = "coverage.xml")
pkgdown::build_site()
