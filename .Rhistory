project_path
# for scenarios w/ different regional carbon prices, weigh regional price by final energy to get global CO2 price
region_weight <<-
fe_sector_clean %>%
dplyr::filter(var == "Final Energy") %>%
dplyr::group_by(scenario, year) %>%
dplyr::mutate(weight = value/sum(value)) %>%
dplyr::ungroup() %>%
dplyr::select(-value, -var)
co2_price_global_pre <<-
rgcam::getQuery(prj, "CO2 prices") %>%
dplyr::filter(market == "globalCO2")
co2_price_global <<-
tibble::as_tibble(co2_price_global_pre) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market = gsub("global", "", market)) %>%
dplyr::mutate(market = gsub("_", "", market)) %>%
dplyr::left_join(co2_market_frag_map, by = "market") %>%
dplyr::filter(value != 0) %>%
tidyr::expand_grid(tibble::tibble(region = regions)) %>%
dplyr::select(all_of(long_columns))
co2_price_global <<-
tibble::as_tibble(co2_price_global_pre) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market = gsub("global", "", market)) %>%
dplyr::mutate(market = gsub("_", "", market)) %>%
dplyr::left_join(co2_market_frag_map, by = "market", multiple = "all") %>%
dplyr::filter(value != 0) %>%
tidyr::expand_grid(tibble::tibble(region = regions)) %>%
dplyr::select(all_of(long_columns))
a1 = co2_price_global
co2_price_global <<-
tibble::as_tibble(co2_price_global_pre) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market = gsub("global", "", market)) %>%
# dplyr::mutate(market = gsub("_", "", market)) %>%
dplyr::left_join(co2_market_frag_map, by = "market", multiple = "all") %>%
dplyr::filter(value != 0) %>%
tidyr::expand_grid(tibble::tibble(region = regions)) %>%
dplyr::select(all_of(long_columns))
a2 = co2_price_global
diffdf:diff(a1,a2)
setdiff(a1,a2)
dplyr::anti_join(a1,a2)
dplyr::anti_join(a2,a1)
co2_price_fragmented_pre <<-
rgcam::getQuery(prj, "CO2 prices") %>%
dplyr::filter(!grepl("LUC", market)) %>%
dplyr::filter(market != "globalCO2")
co2_price_fragmented_pre <<-
rgcam::getQuery(prj, "CO2 prices") %>%
dplyr::filter(!grepl("LUC", market)) %>%
dplyr::filter(market != "globalCO2")
co2_price_fragmented <<-
co2_price_fragmented_pre %>%
dplyr::left_join(CO2_market, by = c("market"), multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market_adj = "CO2",
market_adj = dplyr::if_else(grepl("ETS", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2BLD", market), "CO2BLD", market_adj),
market_adj = dplyr::if_else(grepl("CO2IND", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2TRAN", market), "CO2TRAN", market_adj)) %>%
dplyr::mutate(market = market_adj) %>%
dplyr::select(-market_adj) %>%
dplyr::left_join(co2_market_frag_map, by = "market", multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
tidyr::complete(tidyr::nesting(scenario, var, year, market, Units), region = regions, fill = list(value = 0)) %>%
dplyr::select(all_of(long_columns))
View(co2_price_fragmented)
co2_price_fragmented <<-
co2_price_fragmented_pre %>%
dplyr::left_join(CO2_market, by = c("market"), multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market_adj = "CO2",
market_adj = dplyr::if_else(grepl("ETS", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2BLD", market), "CO2BLD", market_adj),
market_adj = dplyr::if_else(grepl("CO2IND", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2TRAN", market), "CO2TRAN", market_adj)) %>%
dplyr::mutate(market = market_adj) %>%
dplyr::select(-market_adj)
View(co2_price_fragmented)
co2_price_fragmented <<-
co2_price_fragmented_pre %>%
dplyr::left_join(CO2_market, by = c("market"), multiple = "all") %>%
dplyr::filter(stats::complete.cases(.))
View(co2_price_fragmented)
View(co2_price_fragmented_pre)
co2_price_fragmented <<-
co2_price_fragmented_pre %>%
dplyr::left_join(CO2_market, by = c("market"), multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
dplyr::mutate(value = value / conv_C_CO2 * conv_90USD_10USD) %>%
dplyr::mutate(market_adj = "CO2",
market_adj = dplyr::if_else(grepl("ETS", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2BLD", market), "CO2BLD", market_adj),
market_adj = dplyr::if_else(grepl("CO2IND", market), "CO2_ETS", market_adj),
market_adj = dplyr::if_else(grepl("CO2TRAN", market), "CO2TRAN", market_adj)) %>%
dplyr::mutate(market = market_adj) %>%
dplyr::select(-market_adj) %>%
dplyr::left_join(co2_market_frag_map, by = "market", multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
tidyr::complete(tidyr::nesting(scenario, var, year, market, Units), region = regions, fill = list(value = 0)) %>%
dplyr::select(all_of(long_columns))
co2_price_clean_pre <<-
dplyr::bind_rows(co2_price_global, co2_price_fragmented)
nrow(co2_price_clean_pre) < 1 | length(unique(co2_price_clean_pre$scenario)) < Scenarios
co2_price_clean <<-
tibble::tibble(var = unique(co2_market_frag_map$var)) %>%
tidyr::expand_grid(tibble::tibble(scenario = setdiff(Scenarios, unique(co2_price_clean_pre$scenario)))) %>%
tidyr::expand_grid(tibble::tibble(year = unique(fe_sector_clean$year))) %>%
tidyr::expand_grid(tibble::tibble(region = c(unique(fe_sector_clean$region), "Global"))) %>%
dplyr::mutate(value = 0) %>%
dplyr::select(all_of(long_columns))
co2_price_clean_pre1 <<-
dplyr::bind_rows(co2_price_global, co2_price_fragmented)
co2_price_clean <<- co2_price_clean_pre1 %>%
tidyr::complete(tidyr::nesting(region, var, year), scenario = unique(fe_sector_clean$scenario), fill = list(value = 0)) %>%
dplyr::select(all_of(long_columns))
unique(co2_price_clean$scenario)
source("~/IAM_COMPACT/gcamreport/R/functions.R")
unique(co2_price_clean$scenario)
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
library(gcamreport)
load_project(project_path)
final_year = 2100
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns:
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <<- data.frame('name' =
c('population_clean', 'GDP_MER_clean', 'GDP_PPP_clean',
'global_temp_clean', 'forcing_clean', 'co2_concentration_clean',
'co2_emissions_clean', 'tot_co2_clean', 'co2_sequestration_clean',
'ag_demand_clean', 'land_clean',
'primary_energy_clean', 'energy_trade_clean',
'elec_gen_tech_clean', 'elec_capacity_tot_clean', 'elec_capacity_add_clean',
'se_gen_tech_clean', 'fe_sector_clean',
'energy_service_transportation_clean',
'energy_service_buildings_clean',
'ag_prices_clean', 'industry_production_clean',
'elec_capital_clean',
'elec_investment_clean', 'transmission_invest_clean', 'CCS_invest_clean', 'resource_investment_clean',
'nonco2_clean',
'co2_price_clean'),
'required' = TRUE)
# consider only the desired variables
if (desired_variables == 'All') {
variables <<- variables_base
} else {
variables <<- dplyr::anti_join(variables_base, desired_variables, by = 'name')
}
variables <<- variables_base
removed = setdiff(variables_base$name, variables$name)
if (length(removed) > 0) {
print('The following variables have been removed:')
for (r in removed) {
print(r)
}
}
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
## Main functions of the package
## TODO: 'create project' function
library(usethis)
library(magrittr)
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
var = variables[1,]
str(var)
exists(var$name)
var$name
# variables_functions_mapping
var_fun_map <- read.csv(paste0(rawDataFolder, "/inst/extdata/mappings", "/variables_functions_mapping.csv"),
sep=';',header=T, na.strings=c("","NA"))
var_fun_map$dependencies <- as.list(strsplit(as.character(var_fun_map$dependencies), ","))
var_fun_map$checks <- as.list(strsplit(as.character(var_fun_map$checks), ","))
# variables_functions_mapping
var_fun_map <- read.csv(paste0(rawDataFolder, "/inst/extdata/mappings", "/variables_functions_mapping.csv"),
sep=';',header=T, na.strings=c("","NA"))
### paths
rawDataFolder = here::here()
# variables_functions_mapping
var_fun_map <- read.csv(paste0(rawDataFolder, "/inst/extdata/mappings", "/variables_functions_mapping.csv"),
sep=';',header=T, na.strings=c("","NA"))
var_fun_map$dependencies <- as.list(strsplit(as.character(var_fun_map$dependencies), ","))
var_fun_map$checks <- as.list(strsplit(as.character(var_fun_map$checks), ","))
use_data(var_fun_map, overwrite=T)
variables <<- variables_base
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
var = variables[1,]
var$name
sessionInfo()
source("~/IAM_COMPACT/gcamreport/R/main.R")
# for all desired variables, load the corresponding data
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
library(gcamreport)
source("~/IAM_COMPACT/gcamreport/R/main.R")
run(project_path, launch_app = FALSE)
sessionInfo()
.libPaths()
C:\Users\claudia.rodes\Documents\R\win-library\Russell_Libraries\4.0
lib = "C:\Users\claudia.rodes\Documents\R\win-library\Russell_Libraries\4.0"
.libPaths(lib)
.libPaths( c( lib , .libPaths() ) )
lib
Rlib = "C:\Users\claudia.rodes\Documents\R\win-library\Russell_Libraries\4.0"
Rlib = "C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\Russell_Libraries\\4.0"
.libPaths(c(Rlib, .libPaths()))
.libPaths()
.libPaths(c(Rlib, "C:/Program Files/R/R-4.1.0/library"))
.libPaths()
library(gcamreport)
library(gcamreport)
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
run(project_path)
load_project(project_path)
final_year = 2100
file_name = gsub("\\.dat$", "", project_path)
file_name = paste0(file_name,'_ipcc_report.csv')
# bind and save results
do_bind_results()
write.csv(final_data, file.path(file_name), row.names = FALSE)
# checks, vetting, and errors summary
errors <<- c()
is.na(variables$checks)
variables$checks
unique(variables$checks)
d = "check_trade"
out = get(variables$fun[which(variables$name == d)])()
errors <<- append(errors,out)
# checks, vetting, and errors summary
errors <<- c()
errors <<- append(errors,out)
vet = do_check_vetting()
print('The following checks have been performed:')
# Check vetting results from SM
global_vet_values <- read.csv(paste0(here::here(), "/inst/extdata/vetting", "/global_vet_values.csv"),
stringsAsFactors = FALSE)
final_data_long_check <- final_data %>%
tidyr::gather(year, value, -Model, -Variable, -Unit, -Scenario, -Region) %>%
dplyr::rename(region = Region,
variable = Variable) %>%
dplyr::filter(Scenario == Scenarios[1]) %>%
dplyr::mutate(year = as.integer(year))
library(usethis)
library(magrittr)
options(dplyr.summarise.inform = FALSE)
# Check vetting results from SM
global_vet_values <- read.csv(paste0(here::here(), "/inst/extdata/vetting", "/global_vet_values.csv"),
stringsAsFactors = FALSE)
final_data_long_check <- final_data %>%
tidyr::gather(year, value, -Model, -Variable, -Unit, -Scenario, -Region) %>%
dplyr::rename(region = Region,
variable = Variable) %>%
dplyr::filter(Scenario == Scenarios[1]) %>%
dplyr::mutate(year = as.integer(year))
check_vet <- global_vet_values %>%
dplyr::select(variable = adj_var, adj_var2, region, year, value, unit, range = Range) %>%
dplyr::rename(unit_vet = unit,
value_vet = value) %>%
dplyr::left_join(final_data_long_check, by = c("variable", "region", "year")) %>%
dplyr::mutate(value = dplyr::if_else(grepl("Traditional", variable), value * -1, value)) %>%
dplyr::select(Scenario, variable = adj_var2, region, year, value, unit = Unit, value_vet, unit_vet, range) %>%
# Adjust for Solar&Wind and biomass
dplyr::group_by(Scenario, variable, region, year, unit, unit_vet, range) %>%
dplyr::summarise(value = sum(value),
value_vet = mean(value_vet)) %>%
dplyr::ungroup() %>%
# dplyr::mutate(unit_vet = as.character(unit_vet)) %>%
dplyr::mutate(value_vet = dplyr::if_else(unit_vet == "bcm", value_vet * bcm_to_EJ, value_vet),
unit_vet = dplyr::if_else(unit_vet == "bcm", "EJ/yr", unit_vet)) %>%
dplyr::mutate(diff = (value / value_vet) - 1,
check = dplyr::if_else(abs(diff) > range, "Check", "OK"))
check_vet_summary <- check_vet %>% dplyr::filter(check == "Check")
## plot
check_vet_plot <- check_vet %>%
dplyr::select(-year, -range, -diff, -check, -unit_vet) %>%
tidyr::gather(type, value, -variable, -Scenario, -unit, -region)
ggplot2::ggplot(check_vet_plot, ggplot2::aes(x = variable, y = value, fill = type)) +
ggplot2::geom_bar(stat = "identity", position = "dodge") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(x = "", y = "value") +
ggplot2::theme_classic()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
legend.position = "bottom",
strip.text = ggplot2::element_text(size = 5),
legend.title = ggplot2::element_blank())
if (!dir.exists(paste0(here::here(), "/output/figure/"))){
dir.create(paste0(here::here(), "/output/figure/"))
}
ggplot2::ggsave(paste0(here::here(), "/output/figure", "/vetting.tiff"), ggplot2::last_plot(), "tiff", dpi = 200)
.libPaths()
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Libraries//4.0")
.libPaths()
library(gcamreport)
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
run(project_path)
sessionInfo()
devtools::load_all()
.libPaths()
sessionInfo()
getwd()
Sys.setenv()
.libPaths()
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Libraries//4.0")
.libPaths()
library(gcamreport)
sessionInfo()
## Main functions of the package
## TODO: 'create project' function
library(usethis)
library(magrittr)
.libPaths()
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
load_project(project_path)
sessionInfo()
.libPaths()
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Libraries//4.0")
.libPaths()
sessionInfo()
devtools::load_all()
library(gcamreport)
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
load_project(project_path)
sessionInfo()
final_year = 2100
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns:
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <<- data.frame('name' =
c('population_clean', 'GDP_MER_clean', 'GDP_PPP_clean',
'global_temp_clean', 'forcing_clean', 'co2_concentration_clean',
'co2_emissions_clean', 'tot_co2_clean', 'co2_sequestration_clean',
'ag_demand_clean', 'land_clean',
'primary_energy_clean', 'energy_trade_clean',
'elec_gen_tech_clean', 'elec_capacity_tot_clean', 'elec_capacity_add_clean',
'se_gen_tech_clean', 'fe_sector_clean',
'energy_service_transportation_clean',
'energy_service_buildings_clean',
'ag_prices_clean', 'industry_production_clean',
'elec_capital_clean',
'elec_investment_clean', 'transmission_invest_clean', 'CCS_invest_clean', 'resource_investment_clean',
'nonco2_clean',
'co2_price_clean'),
'required' = TRUE,
stringsAsFactors = FALSE)
variables <<- variables_base
removed = setdiff(variables_base$name, variables$name)
if (length(removed) > 0) {
print('The following variables have been removed:')
for (r in removed) {
print(r)
}
}
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
# for all desired variables, load the corresponding data
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
file_name = NULL
file_name = gsub("\\.dat$", "", project_path)
file_name = paste0(file_name,'_ipcc_report.csv')
# bind and save results
do_bind_results()
if (!dir.exists(paste0(here::here(), "/output/datasets/"))){
if (!dir.exists(paste0(here::here(), "/output/"))){
dir.create(paste0(here::here(), "/output/"))
}
dir.create(paste0(here::here(), "/output/datasets/"))
}
write.csv(final_data, file.path(file_name), row.names = FALSE)
# checks, vetting, and errors summary
errors <<- c()
for (ch in variables$checks) {
if (!is.na(ch)) {
for (d in ch[[1]]) {
out = get(variables$fun[which(variables$name == d)])()
errors <<- append(errors,out)
}
}
}
vet = do_check_vetting()
print('The following checks have been performed:')
errors <<- append(errors,vet)
for (e in errors) {
print(e)
}
# define the dataset for launching the app
sdata <<- final_data %>%
tidyr::separate(Variable, into = c('col1','col2','col3','col4','col5','col6','col7'), sep = "([\\|])", extra = 'merge', remove = FALSE)
# create vector of available years for launching the app
available_years <<- as.numeric(names(sdata)[13:length(names(sdata))])
# develop a nested list of the variables and regions for launching the app
cols <<- unique(sdata[, grepl('col', names(sdata))])
tree_vars <<- do_mount_tree(cols,names(cols),selec=TRUE)
tree_reg <<- do_mount_tree(reg_cont,names(reg_cont),selec=TRUE)
# save a list of all variables
all_vars <<- do_collapse_df(cols)
if (launch_app) {
print('Launching app...')
# launch app
launch_gcamreport_app()
}
# launch app
launch_gcamreport_app()
runApp('inst/gcamreport_app')
source("~/IAM_COMPACT/gcamreport/R/app_functions.R")
runApp('inst/gcamreport_app')
source("~/IAM_COMPACT/gcamreport/R/app_functions.R")
runApp('inst/gcamreport_app')
a = c('NA|aa','NA|bb')
grep('NA',a)
a = c('NA|aa','NA|bb', 'er')
grep('NA',a)
source("~/IAM_COMPACT/gcamreport/R/app_functions.R")
runApp('inst/gcamreport_app')
here::here()
firstTime = TRUE
source("~/IAM_COMPACT/gcamreport/R/app_functions.R")
runApp('inst/gcamreport_app')
load(("C:/Users/claudia.rodes/Documents/IAM_COMPACT/sel_vars_ok.RData"))
sel_vars_ok = sel_vars
load(("C:/Users/claudia.rodes/Documents/IAM_COMPACT/sel_vars.RData"))
head(sel_vars)
head(sel_vars_ok)
vars = do_unmount_tree(sel_vars, 'variables')
vars
vars_ok = do_unmount_tree(sel_vars_ok, 'variables')
type = 'variables'
base_tree = sel_vars
# transform dataset to list of items with delimiter |
ll = rrapply::rrapply(
base_tree,
classes = "numeric",
how = "flatten",
options = list(namesep = "|", simplify = FALSE)
)
ll = names(ll)
ll
sessionInfo()
install.packages("rrapply")
install.packages("rrapply")
install.packages("rrapply")
.libPaths()
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Library/4.0)
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Library/4.0")
.libPaths()
.libPaths(c("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Library/4.0"))
.libPaths()
.libPaths()
library(gcamreport)
.libPaths()
.libPaths("C:/Users/claudia.rodes/Documents/R/win-library/Russell_Libraries/4.0")
.libPaths()
devtools::load_all()
project_path = 'C:\\Users\\claudia.rodes\\Documents\\IAM_COMPACT\\gcamreport_testing_datasets\\gas_fin_updated.dat'
run(project_path)
firstTime=FALSE
launch_gcamreport_app()
library(gcamreport)
source("~/IAM_COMPACT/gcamreport/inst/extdata/saveDataFiles.R")
devtools::check()
devtools::load_all()
install.packages("pkgdown")
library(pkgdown)
pkgdown::build_site()
library(usethis)
usethis::use_vignette("Tutorial_to_generate_dataset")
usethis::use_vignette("Dataset_Generation_Tutorial")
usethis::use_vignette("Interactive_UI_Tutorial")
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("Version_Guide")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
a = 'asdf.dat'
gsub('.dat',a)
'.dat' in a
'.dat' %in% a
a
grepl('.dat',a)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
source("~/IAM_COMPACT/gcamreport/R/main.R")
pkgdown::build_site()
pkgdown::build_site()
