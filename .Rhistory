vars
GCAM_DATA <-
dplyr::bind_rows(lapply(vars, function(x) get(x))) %>%
dplyr::mutate(region = gsub("Global", "World", region),
region = gsub("global", "World", region))
GCAM_DATA
# Calculate global total
GCAM_DATA_WORLD <-
GCAM_DATA %>%
dplyr::filter(region != "World", # excl. Temperature|Forcing|Concentration
# excl. price and costs variables - already calculated global average
!grepl("Price|Capital Cost", var)) %>%
dplyr::group_by(scenario, year, var) %>%
dplyr::summarise(value = sum(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(region = "World")
GCAM_DATA_WORLD
GCAM_DATA_wGLOBAL <-
GCAM_DATA_WORLD %>%
dplyr::bind_rows(GCAM_DATA %>% dplyr::filter(!(region == "World" & var %in% unique(GCAM_DATA_WORLD$var)))) %>%
tidyr::complete(tidyr::nesting(scenario, region, var), year = reporting_years) %>%
tidyr::replace_na(list(value = 0)) %>%
dplyr::distinct(.)
GCAM_DATA_wGLOBAL
# dplyr::filter to final_db_year
GCAM_DATA_wGLOBAL <- GCAM_DATA_wGLOBAL %>% dplyr::filter(year <= final_db_year)
GCAM_DATA_wGLOBAL
GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value')
final_data <<-
template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all")
template
head(template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all"))
region
final_data <<-
template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all") %>%
#  dplyr::left_join(reporting_scen %>% dplyr::select(GCAM_scenario, Scenario),
#            by = c("scenario" = "GCAM_scenario")) %>%
dplyr::rename(Region = region)
final_data
final_data <<-
template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all") %>%
#  dplyr::left_join(reporting_scen %>% dplyr::select(GCAM_scenario, Scenario),
#            by = c("scenario" = "GCAM_scenario")) %>%
dplyr::rename(Region = region) %>%
#  dplyr::rename(Model = ?..Model) %>%
dplyr::rename(Scenario = scenario)
final_data
final_data <<-
template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all") %>%
#  dplyr::left_join(reporting_scen %>% dplyr::select(GCAM_scenario, Scenario),
#            by = c("scenario" = "GCAM_scenario")) %>%
dplyr::rename(Region = region) %>%
#  dplyr::rename(Model = ?..Model) %>%
dplyr::rename(Scenario = scenario) %>%
dplyr::select(all_of(reporting_columns_fin))
final_data
final_data <<-
template %>%
dplyr::inner_join(GCAM_DATA_wGLOBAL %>%
na.omit %>%
tidyr::pivot_wider(names_from = 'year', values_from = 'value'),
by = c("Variable" = "var"), multiple = "all") %>%
#  dplyr::left_join(reporting_scen %>% dplyr::select(GCAM_scenario, Scenario),
#            by = c("scenario" = "GCAM_scenario")) %>%
dplyr::rename(Region = region) %>%
#  dplyr::rename(Model = ?..Model) %>%
dplyr::rename(Scenario = scenario) %>%
dplyr::select(all_of(reporting_columns_fin)) %>%
dplyr::filter(!is.na(Region))
final_data
desired_variables
variables
head(variables)
head(final_data)
head(template)
!(length(desired_variables) == 1 && desired_variables == 'All')
length(desired_variables) == 1
source("C:/GCAM_working_group/IAM COMPACT/gcamreport/R/functions.R")
if (!dir.exists(paste0(rprojroot::find_root(rprojroot::is_testthat), "/testOutputs/v_7.0/"))){
dir.create(paste0(rprojroot::find_root(rprojroot::is_testthat), "/testOutputs/v_7.0/"))
}
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
View(testResult1)
testResult2 = testResult1
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.xlsx'))
testthat::expect_equal(testResult1, testResult2)
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.xlsx'))
testthat::expect_equal(testResult1, testResult2)
# clean environment
rm(list = ls())
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
source("C:/GCAM_working_group/IAM COMPACT/gcamreport/R/functions.R")
library(gcamreport)
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
head(testResult1)
head(testResult2)
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.xlsx'))
testthat::expect_equal(testResult1, testResult2)
# clean environment
rm(list = ls())
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1, testResult2)
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.xlsx'))
testthat::expect_equal(testResult1, testResult2)
vv = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/results_test6.RData')))
loaded_internal_variables <<- c()
desired_regions <<- 'All'
desired_variables <<- 'All'
variables_base <- data.frame('name' = unique(template$Internal_variable)[!is.na(unique(template$Internal_variable)) & unique(template$Internal_variable) != ""],
'required' = TRUE,
stringsAsFactors = FALSE)
variables <<- merge(variables_base,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
load_variable(vv)
ag_prices_wld
testthat::expect(exists("ag_prices_wld"), 'Loading variables function is broken.')
get_elec_capital()
testthat::expect(exists("elec_capital_clean"), 'get_elec_capital() function is broken.')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test7.1.RData')))
testthat::expect_equal(elec_capital_clean, testResult)
testResult
run(db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test.dat',
scenarios = 'Reference',
final_year = 2050,
desired_regions = 'All',
desired_variables = c('Emissions|CH4*'),
launch_ui = FALSE)
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test10.1.RData')))
testthat::expect_equal(vetting_summary, testResult)
rm(list = ls())
run(db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test.dat',
scenarios = 'Reference',
final_year = 2050,
desired_regions = 'All',
desired_variables = c('Emissions|Sulfur*'),
launch_ui = FALSE)
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test10.2.RData')))
testthat::expect_equal(vetting_summary, testResult)
rm(list = ls())
run(db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test.dat',
scenarios = 'Reference',
final_year = 2050,
desired_regions = 'South Africa',
desired_variables = c('Final Energy*'),
launch_ui = FALSE)
testthat::expect(!exists('vetting_summary'), 'ERROR: vetting performed when not all regions were selected')
vetting_summary
library(gcamreport); library(testthat); library(magrittr); library(rprojroot)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE)
# do_mount_tree with regions
testResult1 = do_mount_tree(reg_cont,names(reg_cont),selec=TRUE)
testResult1
testExpect1 = testResult1
save(testExpect1, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_1.RData')
)
testExpect1 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_1.RData')))
testthat::expect_equal(testResult1, testExpect1)
# do_mount_tree with variables
testResult2 = do_mount_tree(cols,names(cols),selec=TRUE)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = TRUE)
# do_mount_tree with variables
testResult2 = do_mount_tree(cols,names(cols),selec=TRUE)
testResult2
testExpect2 =testResult2
save(testExpect2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_2.RData')
)
testExpect2 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/tree_vars_test.RData')))
testthat::expect_equal(testResult2, testExpect2)
testExpect2 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_2.RData')))
testthat::expect_equal(testResult2, testExpect2)
# do_collapse_df
testResult3 = do_collapse_df(cols)
testResult3
testExpect3 = testResult3
save(testExpect3, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_3.RData'))
testExpect3 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_3.RData')))
testthat::expect_equal(testResult3, testExpect3)
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/pre_tree_regions.RData')))
# check_user_choices_plot
testResult5 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = TRUE)
testResult5
testExpect5 = testResult5
save(testExpect5, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_5.RData'))
testExpect5 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_5.RData')))
testthat::expect_equal(testResult5, testExpect5)
testResult6 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = FALSE)
testResult6
testExpect6 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_6.0/message6.RData')))
testExpect6
testExpect6 = testResult6
save(testExpect6, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_6.RData'))
testExpect6 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_6.RData')))
testthat::expect_equal(testResult6, testExpect6)
testResult7 = check_user_choices_plot(c('var1'), c('scen1','scen2'), c('year1','year2'), 'reg1', grouped = FALSE)
testExpect7 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/message7.RData')))
testExpect7 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_6.0/message7.RData')))
testExpect7
testResult7
testExpect7 = testResult7
save(testExpect7, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_7.RData'))
testExpect7 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_7.RData')))
testthat::expect_equal(testResult7, testExpect7)
# compute_height
testResult8 = compute_height(c(reg_cont[,2],'World'))
testExpect8 = 960
testthat::expect_equal(testResult8, testExpect8)
testResult9 = compute_height(c('MAF','LAM'))
testExpect9 = 325
testthat::expect_equal(testResult9, testExpect9)
expect_error(launch_gcamreport_ui(),
"ERROR: Specify either the dataset or the dataset path to be considered.")
expect_error(launch_gcamreport_ui('dummy1','dummy2'),
"ERROR: Specify either the dataset or the dataset path to be considered, not both")
tree_reg
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_6.0/pre_tree_regions.RData')))
str(tree_reg)
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_6.0/pre_tree_regions.RData')))
str(test4_pre)
View(test4_pre)
View(tree_reg)
test4_pre = tree_reg
save(test4_pre , file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_pre.RData'))
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_pre.RData')))
testResult4 = change_style(test4_pre, 'regions')
View(testResult4)
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_6.0/pre_tree_regions.RData')))
testResult42 = change_style(test4_pre, 'regions')
View(testResult42)
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_pre.RData')))
testResult4 = change_style(test4_pre, 'regions')
testExpect4 = testResult4
save(testExpect4 , file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_post.RData'))
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_pre.RData')))
testExpect4 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_post.RData')))
testResult4 = change_style(test4_pre, 'regions')
testthat::expect_equal(testResult4, testExpect4)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'))
cov <- covr::package_coverage()
install.packages(c("remotes","rcmdcheck","covr"), repos = "https://cloud.r-project.org")
remotes::install_github("JGCRI/rpackageutils")
remotes::install_deps(dependencies = TRUE)
cov <- covr::package_coverage()
covr::package_coverage()
covr::covr-package
covr::covr-package()
covr::report()
setwd("C:/GCAM_working_group/IAM COMPACT/gcamreport")
covr::report()
library(covr)
cov <- covr::package_coverage()
library(gcamreport)
library(covr)
package_coverage()
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test.dat',
scenarios = 'Reference',
final_year = 2050,
desired_regions = 'South Africa',
desired_variables = c('Final Energy*'),
launch_ui = FALSE)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE)
# load data
data = final_data
# define the dataset for launching the ui
sdata <<- data %>%
tidyr::separate(Variable, into = c('col1','col2','col3','col4','col5','col6','col7'), sep = "([\\|])", extra = 'merge', remove = FALSE)
# create vector of available years for launching the ui
available_years <<- as.numeric(names(sdata)[13:length(names(sdata))])
# develop a nested list of the variables and regions for launching the ui
cols <<- unique(sdata[, grepl('col', names(sdata))])
tree_vars <<- do_mount_tree(cols,names(cols),selec=TRUE)
tree_reg <<- do_mount_tree(reg_cont,names(reg_cont),selec=TRUE)
# save a list of all variables
all_vars <<- do_collapse_df(cols)
# do_mount_tree with regions
testResult1 = do_mount_tree(reg_cont,names(reg_cont),selec=TRUE)
testExpect1 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_1.RData')))
testthat::expect_equal(testResult1, testExpect1)
# do_mount_tree with variables
testResult2 = do_mount_tree(cols,names(cols),selec=TRUE)
testExpect2 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_2.RData')))
testthat::expect_equal(testResult2, testExpect2)
# do_collapse_df
testResult3 = do_collapse_df(cols)
testExpect3 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_3.RData')))
testthat::expect_equal(testResult3, testExpect3)
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_pre.RData')))
testExpect4 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_4_post.RData')))
testResult4 = change_style(test4_pre, 'regions')
testthat::expect_equal(testResult4, testExpect4)
# check_user_choices_plot
testResult5 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = TRUE)
testExpect5 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_5.RData')))
testthat::expect_equal(testResult5, testExpect5)
testResult6 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = FALSE)
testExpect6 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_6.RData')))
testthat::expect_equal(testResult6, testExpect6)
testResult7 = check_user_choices_plot(c('var1'), c('scen1','scen2'), c('year1','year2'), 'reg1', grouped = FALSE)
testExpect7 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test_ui_7.RData')))
testthat::expect_equal(testResult7, testExpect7)
# compute_height
testResult8 = compute_height(c(reg_cont[,2],'World'))
testExpect8 = 960
testthat::expect_equal(testResult8, testExpect8)
testResult9 = compute_height(c('MAF','LAM'))
testExpect9 = 325
testthat::expect_equal(testResult9, testExpect9)
cov <- covr::package_coverage()
library(covr)
Sys.setenv("gcamdata.is_coverage_test" = "TRUE")
x <- package_coverage()
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP');covr::package_coverage()
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
covr::package_coverage()
covr::package_coverage() -> x
cat("coverage = ", percent_coverage(x), " %\n")
codecov(coverage = x)
library(covr)
cat("coverage = ", percent_coverage(x), " %\n")
codecov(coverage = x)
covr:::report(x, file = "coverage.xml")
install.packages(c("DT", "htmltools"))
covr:::report(x, file = "coverage.xml")
covr:::report(x, file = "coverage.xml")
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
devtools::load_all()
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
devtools::load_all()
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
head(testResult1)
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1 %>%
dplyr::select(-Unit),
testResult2 %>%
dplyr::select(-Unit))
testResult2 = testResult1
write.csv(testResult2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testResult2 = testResult1
write.csv(testResult2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
write.csv(testResult2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.csv'))
testResult2 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.xlsx'))
testthat::expect_equal(testResult1 %>%
dplyr::select(-Unit),
testResult2 %>%
dplyr::select(-Unit))
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
library(gcamreport); library(testthat); library(magrittr); library(rprojroot); library(rpackageutils)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE,
output_file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output'))
testResult1 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.csv'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = testResult1
write.csv(testResult2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'), row.names = F)
testResult2 = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.1.csv'))
testthat::expect_equal(testResult1 %>%
dplyr::select(-Unit),
testResult2 %>%
dplyr::select(-Unit))
testResult1 = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/test7_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult1) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult2 = testResult1
write.csv(testResult2, file = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/v_7.0/result_test4.2.csv'), row.names = F)
devtools::load_all()
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
devtools::load_all()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck('file.Rmd')
rcmdcheck::rcmdcheck()-> x
install.packages("pdflatex")
rcmdcheck::rcmdcheck()-> x
library(pdflatex)
rcmdcheck::rcmdcheck()-> x
print(errors)
rcmdcheck::rcmdcheck()-> x
devtools::load_all()
rcmdcheck::rcmdcheck()-> x
library(gcamreport)
x$errors
rm -Rf C:/Users/CLAUDI~1.ROD/AppData/Local/Temp/7/RtmpSEyevE/Rd2pdf92002e367dfa'
devtools::load_all()
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
devtools::load_all()
rcmdcheck::rcmdcheck()-> x
.libPaths('C:\\Users\\claudia.rodes\\Documents\\R\\win-library\\4.1 - gcamdata_no_CP')
devtools::load_all()
rcmdcheck::rcmdcheck()-> x
library(gcamreport)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("gcamreport_v6-0")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("Dataset_Generation_Tutorial_v6.0")
usethis::use_vignette("Dataset_Generation_Tutorial_v6-0")
pkgdown::build_site()
pkgdown::build_site()
av_cont = unique(reg_cont$continent)
av_cont
available_variables()
usethis::use_vignette("Interactive_UI_Tutorial_v6.0")
usethis::use_vignette("Interactive_UI_Tutorial_v6-0")
usethis::use_vignette("Step_By_Step_Full_Example_v6.0")
usethis::use_vignette("Step_By_Step_Full_Example_v6-0")
available_variables()->a
head(a)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("README_v6-0")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(gcamreport)
