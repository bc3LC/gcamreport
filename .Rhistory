run(project_path = project_path)
source("~/IAM_COMPACT/gcamreport/R/main.R")
library(gcamreport)
library(gcamreport)
library(gcamreport); library(testthat); library(magrittr); library(rprojroot)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6.dat'), launch_ui = FALSE)
library(rgcam)
loadProject('tests/testthat/testInputs/test6.dat')
prj = loadProject('tests/testthat/testInputs/test6.dat')
listScenarios(prj)
prj2 = prj
prj2[['Reference']]['inputs by sector'] = prj2[['Reference']]['inputs by tech'] %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
str(prj2[['Reference']]['inputs by tech'])
prj2[['Reference']]['inputs by tech'][1]
prj2[['Reference']]['inputs by tech'][1] %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
data.frame(prj2[['Reference']]['inputs by tech'][1]) %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
data.frame(prj2[['Reference']]['inputs by tech'][1])
dt = data.frame(prj2[['Reference']]['inputs by tech'][1])
new_colnames <- sub(".*\\.(.*)", "\\1", names(dt))
names(dt) <- new_colnames
head(dt)
dt = dt %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
head(dt)
prj_n
listScenarios(prj)
data = data.frame()
dt = data.frame(prj2[['Reference']]['inputs by tech'][1])
new_colnames <- sub(".*\\.(.*)", "\\1", names(dt))
names(dt) <- new_colnames
dt = dt %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
data = dplyr::bind_rows(data,dt)
dt = data.frame(prj2[['Tax_global']]['inputs by tech'][1])
new_colnames <- sub(".*\\.(.*)", "\\1", names(dt))
names(dt) <- new_colnames
dt = dt %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
data = dplyr::bind_rows(data,dt)
dt = data.frame(prj2[['Tax_reg']]['inputs by tech'][1])
new_colnames <- sub(".*\\.(.*)", "\\1", names(dt))
names(dt) <- new_colnames
dt = dt %>%
dplyr::group_by(scenario,region,sector,input,Units,year) %>%
dplyr::summarise(value = sum(value))
data = dplyr::bind_rows(data,dt)
head(data)
unique(data$scenario)
unique(data$sector)
prj2 <<- rgcam::addQueryTable(project = 'test6.dat', qdata = data,
queryname = 'inputs by sector', clobber = FALSE)
getwd()
saveProject(prj2, file = 'tests/testthat/testInputs/test6.dat')
listQueries(prj2)
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6.dat'), launch_ui = FALSE)
# do_mount_tree with regions
testResult1 = do_mount_tree(reg_cont,names(reg_cont),selec=TRUE)
testExpect1 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/tree_reg_test.RData')))
testthat::expect_equal(testResult1, testExpect1)
# do_mount_tree with variables
testResult2 = do_mount_tree(cols,names(cols),selec=TRUE)
testExpect2 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/tree_vars_test.RData')))
testthat::expect_equal(testResult2, testExpect2)
# do_collapse_df
testResult3 = do_collapse_df(cols)
testExpect3 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/all_vars_test.RData')))
testthat::expect_equal(testResult3, testExpect3)
# change_style
test4_pre = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/pre_tree_regions.RData')))
testExpect4 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/post_tree_regions.RData')))
testResult4 = change_style(test4_pre, 'regions')
testthat::expect_equal(testResult4, testExpect4)
# check_user_choices_plot
testResult5 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = TRUE)
testExpect5 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/message5.RData')))
testthat::expect_equal(testResult5, testExpect5)
testResult6 = check_user_choices_plot(c('var1','var2'), c('scen1','scen2'), c('year1','year2'), NULL, grouped = FALSE)
testExpect6 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/message6.RData')))
testthat::expect_equal(testResult6, testExpect6)
testResult7 = check_user_choices_plot(c('var1'), c('scen1','scen2'), c('year1','year2'), 'reg1', grouped = FALSE)
testExpect7 = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/message7.RData')))
testthat::expect_equal(testResult7, testExpect7)
# compute_height
testResult8 = compute_height(c(reg_cont[,2],'World'))
testExpect8 = 960
testthat::expect_equal(testResult8, testExpect8)
testResult9 = compute_height(c('MAF','LAM'))
testExpect9 = 325
testthat::expect_equal(testResult9, testExpect9)
testthat::expect_equal(testResult8, testExpect9)
testResult = as.numeric(length(load_project(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6.dat'))))
testthat::expect(!is.null(testResult), 'Null project. Check if the path exists or the "load_project" function works correctly.')
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6.dat'), launch_ui = FALSE)
testthat::expect(!is.null(final_data) & dplyr::n_distinct(final_data) > 0, 'Empty dataset. Check if the project path exists or the "run" function works correctly.')
if (!dir.exists(paste0(rprojroot::find_root(rprojroot::is_testthat), "/testOutputs/"))){
dir.create(paste0(rprojroot::find_root(rprojroot::is_testthat), "/testOutputs/"))
}
run(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6.dat'), launch_ui = FALSE,
file_name = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/test6_output'))
testResult = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/test6_output.csv'))
testthat::expect(dplyr::n_distinct(testResult) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
testResult = readxl::read_excel(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/test6_output.xlsx'))
testthat::expect(dplyr::n_distinct(testResult) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
# in principle, data should be already saved due to the Test2
testResult = read.csv(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/test6_ipcc_report.csv'))
testthat::expect(dplyr::n_distinct(testResult) > 0, 'Dataset not saved. Check if the project path exists or the "run" function works correctly.')
vv = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/results_test5.RData')))
load_variable(vv[3,])
testthat::expect(exists("ag_prices_wld"), 'Loading variables function is broken.')
get_elec_capacity_tot()
testthat::expect(exists("elec_capacity_tot_clean"), 'get_elec_capacity_tot() function is broken.')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/result_test6.1.RData')))
testthat::expect_equal(elec_capacity_tot_clean, testResult)
get_elec_capital()
testthat::expect(exists("elec_capital_clean"), 'get_elec_capital() function is broken.')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/result_test6.2.RData')))
testthat::expect_equal(elec_capital_clean, testResult)
db_path <- paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
db_name <- "database_basexdb_gcamreport"
prj_name <- "awesomeProj.dat"
scenarios <- 'Reference'
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios,
final_year = 2020, launch_ui = FALSE)
db_path <- paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
db_name <- "database_basexdb_gcamreport"
prj_name <- "awesomeProj.dat"
scenarios <- 'Reference'
db_path
final_year = 2020
launch_ui = FALSE
# create the project
conn <- rgcam::localDBConn(db_path,
db_name,migabble = FALSE)
for (sc in scenarios) {
prj <- rgcam::addScenario(conn,
prj_name,
sc,
paste0('inst/extdata/queries',"/",'queries_gcamreport_gcam6.0_complete.xml'))
}
prj <<- prj
dt_reg = data_query('nonCO2 emissions by region')
source("~/IAM_COMPACT/gcamreport/R/main.R")
dt_reg = data_query('nonCO2 emissions by region')
dt = data.frame()
xml <- xml2::read_xml('inst/extdata/queries/queries_gcamreport_gcam6.0_nonCO2.xml')
qq <- xml2::xml_find_first(xml, paste0("//*[@title='", type, "']"))
type = 'nonCO2 emissions by region'
qq <- xml2::xml_find_first(xml, paste0("//*[@title='", type, "']"))
qq
sc
emis
qq_sec = gsub("current_emis", emis, qq)
emis = 'BC'
qq_sec = gsub("current_emis", emis, qq)
prj_tmp = rgcam::addSingleQuery(
conn = rgcam::localDBConn(db_path,
db_name,migabble = FALSE),
proj = prj_name,
qn = type,
query = qq_sec,
scenario = sc,
regions = NULL,
clobber = TRUE,
transformations = NULL,
saveProj = FALSE,
warn.empty = TRUE
)
tmp = data.frame(prj_tmp[[sc]][type])
tmp
source("~/IAM_COMPACT/gcamreport/R/main.R")
dt_reg = data_query('nonCO2 emissions by region')
type = ''nonCO2 emissions by region''
type = 'nonCO2 emissions by region'
dt = data.frame()
xml <- xml2::read_xml('inst/extdata/queries/queries_gcamreport_gcam6.0_nonCO2.xml')
qq <- xml2::xml_find_first(xml, paste0("//*[@title='", type, "']"))
for (sc in rgcam::listScenarios(prj)) {
for (emis in emissions_list) {
qq_sec = gsub("current_emis", emis, qq)
prj_tmp = rgcam::addSingleQuery(
conn = rgcam::localDBConn(db_path,
db_name,migabble = FALSE),
proj = prj_name,
qn = type,
query = qq_sec,
scenario = sc,
regions = NULL,
clobber = TRUE,
transformations = NULL,
saveProj = FALSE,
warn.empty = TRUE
)
tmp = data.frame(prj_tmp[[sc]][type])
if (nrow(tmp) > 0) {
dt = dplyr::bind_rows(dt,tmp)
}
rm(prj_tmp)
}
}
prj_name
prj_tmp
sc
rgcam::listScenarios(prj)
library(gcamreport); library(testthat); library(magrittr); library(rprojroot)
db_path <- paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
library(gcamreport)
db_name <- "database_basexdb_gcamreport"
prj_name <- "awesomeProj.dat"
scenarios <- 'Reference'
final_year = 2020
# create the project
conn <- rgcam::localDBConn(db_path,
db_name,migabble = FALSE)
scenarios
for (sc in scenarios) {
print(sc)
prj <- rgcam::addScenario(conn,
prj_name,
sc,
paste0('inst/extdata/queries',"/",'queries_gcamreport_gcam6.0_complete.xml'))
}
# create the project
conn <- rgcam::localDBConn(db_path,
db_name,migabble = FALSE)
listQueries(prj)
prj <<- prj
dt_reg = data_query('nonCO2 emissions by region')
dt_reg = data_query('nonCO2 emissions by region')
source("~/IAM_COMPACT/gcamreport/R/main.R")
dt_reg = data_query('nonCO2 emissions by region')
type = 'nonCO2 emissions by region'
dt = data.frame()
xml <- xml2::read_xml('inst/extdata/queries/queries_gcamreport_gcam6.0_nonCO2.xml')
qq <- xml2::xml_find_first(xml, paste0("//*[@title='", type, "']"))
rgcam::listScenarios(prj)
prj_name
prj_name = 'test_prj_gcam6.0.dat'
# create the project
conn <- rgcam::localDBConn(db_path,
db_name,migabble = FALSE)
for (sc in scenarios) {
prj <- rgcam::addScenario(conn,
prj_name,
sc,
paste0('inst/extdata/queries/','queries_gcamreport_gcam6.0_complete.xml'))
}
prj <<- prj
dt_reg = data_query('nonCO2 emissions by region')
prj_name
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios,
final_year = 2020, launch_ui = FALSE)
# add nonCO2 queries manually (they are too big to use the usual method)
dt_sec = data_query('nonCO2 emissions by sector')
source("~/IAM_COMPACT/gcamreport/R/main.R")
library(gcamreport)
library(gcamreport)
library(gcamreport); library(testthat); library(magrittr); library(rprojroot)
db_path <- paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
db_name <- "database_basexdb_gcamreport"
prj_name <- "test_prj_gcam6.0.dat"
scenarios <- 'Reference'
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios,
final_year = 2020, launch_ui = FALSE)
db_path <- paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
db_name <- "database_basexdb_gcamreport"
prj_name <- "test_prj.dat"
scenarios <- 'Reference'
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios,
final_year = 2020, launch_ui = FALSE)
head(prj)
# make final_db_year as a global variable
final_db_year <<- final_year
final_year = 2020
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns:
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <<- data.frame('name' =
c('population_clean', 'GDP_MER_clean', 'GDP_PPP_clean',
'global_temp_clean', 'forcing_clean', 'co2_concentration_clean',
'co2_emissions_clean', 'tot_co2_clean', 'co2_sequestration_clean',
'ag_demand_clean', 'land_clean',
'primary_energy_clean', 'energy_trade_clean',
'elec_gen_tech_clean', 'elec_capacity_tot_clean', 'elec_capacity_add_clean',
'se_gen_tech_clean', 'fe_sector_clean',
'energy_service_transportation_clean',
'energy_service_buildings_clean',
'ag_prices_clean', 'industry_production_clean',
'elec_capital_clean',
'elec_investment_clean', 'transmission_invest_clean', 'CCS_invest_clean', 'resource_investment_clean',
'nonco2_clean',
'co2_price_clean'),
'required' = TRUE,
stringsAsFactors = FALSE)
variables <<- variables_base
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
# for all desired variables, load the corresponding data
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/database_basexdb_gcamreport_test_prj.dat')))
testthat::expect_equal(prj, testResult)
get(testResult)
testResult
rgcam::listQueries(prj)
rgcam::listQueries(testResult)
# save the project
rgcam::saveProject(prj, file = paste0(db_path, "/", db_name, '_', prj_name))
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/database_basexdb_gcamreport_test_prj.dat')))
testthat::expect_equal(prj, testResult)
rgcam::listQueries(testResult)
testthat::expect_equal(prj$Reference$`nonCO2 emissions by region`, testResultReference$`nonCO2 emissions by region`)
testthat::expect_equal(prj$Reference$`nonCO2 emissions by region`, testResult$Reference$`nonCO2 emissions by region`)
testthat::expect_equal(prj$Reference$`nonCO2 emissions by sector`, testResult$Reference$`nonCO2 emissions by sector`)
testthat::expect_equal(prj$Reference$`CO2 prices`, testResult$Reference$`CO2 prices`)
dt_sec = data_query('nonCO2 emissions by sector')
source("~/IAM_COMPACT/gcamreport/R/main.R")
library(gcamreport)
dt_sec = data_query('nonCO2 emissions by sector')
save(dt_sec, file = 'test/testthat/testOutputs/test7.RData')
getwd()
save(dt_sec, file = 'tests/testthat/testOutputs/test7.RData')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/result_test7.RData')))
save(dt_sec, file = 'tests/testthat/testOutputs/result_test7.RData')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/result_test7.RData')))
testthat::expect_equal(dt_sec, testResult)
source("~/IAM_COMPACT/gcamreport/R/main.R")
library(gcamreport)
# Load the GCAM db form the Zenodo repository
db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),"/testOutputs")
rpackageutils::download_unpack_zip(data_directory = db_path,
url = "https://zenodo.org/record/7326437/files/database_basexdb_ref.zip?download=1")
# Load the GCAM db form the Zenodo repository
db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
k = rpackageutils::download_unpack_zip(data_directory = db_path,
url = "https://zenodo.org/record/7326437/files/database_basexdb_ref.zip?download=1")
k
testthat::expect_equal(1, 1)
db_name <<- "database_basexdb_ref"
prj_name <<- "test_prj.dat"
scenarios <<- 'Reference'
create_project(db_path, db_name, prj_name, scenarios)
library(gcamreport)
create_project(db_path, db_name, prj_name, scenarios)
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/database_basexdb_ref_test_prj.dat')))
testthat::expect_equal(prj$Reference$`nonCO2 emissions by region`, testResult$Reference$`nonCO2 emissions by region`)
prj$Reference$`nonCO2 emissions by region`
rgcam::saveProject(prj, file = 'tests/output.dat')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/database_basexdb_ref_test_prj.dat')))
testthat::expect_equal(prj$Reference$`nonCO2 emissions by region`, testResult$Reference$`nonCO2 emissions by region`)
testthat::expect_equal(prj$Reference$`nonCO2 emissions by sector`, testResult$Reference$`nonCO2 emissions by sector`)
testthat::expect_equal(prj$Reference$`CO2 prices`, testResult$Reference$`CO2 prices`)
# check nonCO2 emissions query
dt_sec = data_query('nonCO2 emissions by sector')
save(dt_sec, file = 'tests/testOutputs/res_test7.RData')
save(dt_sec, file = 'tests/testOutput/res_test7.RData')
save(dt_sec, file = 'tests/testthat/testOutput/res_test7.RData')
save(dt_sec, file = 'tests/testthat/testOutputs/res_test7.RData')
testResult = get(load(paste0(rprojroot::find_root(rprojroot::is_testthat),'/testOutputs/result_test7.RData')))
testthat::expect_equal(dt_sec, testResult)
library(pkgdown)
pkgdown::build_site()
devtools::document()
library(gcamreport)
library(gcamreport)
devtools::document()
library(gcamreport)
devtools::check()
# load a reference GCAM db form a Zenodo repository
db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
rpackageutils::download_unpack_zip(data_directory = db_path,
url = "https://zenodo.org/record/7326437/files/database_basexdb_ref.zip?download=1")
# create the prj
db_name <<- "database_basexdb_ref"
prj_name <<- "test_prj.dat"
scenarios <<- 'Reference'
# load a reference GCAM db form a Zenodo repository
db_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs')
# create the prj
db_name <- "database_basexdb_ref"
prj_name <- "test_prj.dat"
scenarios <- 'Reference'
# create the project
conn <- rgcam::localDBConn(db_path,
db_name,migabble = FALSE)
for (sc in scenarios) {
prj <- rgcam::addScenario(conn,
prj_name,
sc,
paste0('inst/extdata/queries/','queries_gcamreport_gcam6.0_complete.xml'))
}
scenarios
prj <<- prj
# add nonCO2 queries manually (they are too big to use the usual method)
print('nonCO2 emissions by sector')
dt_sec = data_query('nonCO2 emissions by sector', db_path, db_name, prj_name, scenarios)
devtools::document()
library(gcamreport)
library(gcamreport)
devtools::check()
install.packages('covr')
covr::package_coverage(quiet=FALSE)
library(gcamreport)
install.packages(c("remotes","rcmdcheck","rpackageutils"), repos = "https://cloud.r-project.org")
install.packages(c("remotes", "rcmdcheck", "rpackageutils"), repos = "https://cloud.r-project.org")
remotes::install_deps(dependencies = TRUE)
rcmdcheck::rcmdcheck(args = c("--no-manual", "--ignore-vignettes", "--no-build-vignettes"), build_args = c("--no-manual", "--ignore-vignettes", "--no-build-vignettes"), error_on = "error")
shell: Rscript {0}
remotes::install_cran("covr")
covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")
secrets.CODECOV_TOKEN
install.packages(c("remotes","rcmdcheck","covr"), repos = "https://cloud.r-project.org")
install.packages(c("remotes", "rcmdcheck", "covr"), repos = "https://cloud.r-project.org")
covr::package_coverage(quiet=FALSE)
covr::codecov()
db_path = "tests/testthat/testInputs"
db_name = "database_basexdb_ref"
scenarios = 'Reference'
final_year = 2025
prj_name = "my_prj.dat"
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios, final_year = final_year)
library(gcamreport)
run(db_path = db_path, db_name = db_name, prj_name = prj_name, scenarios = scenarios, final_year = final_year)
db_path = "tests/testthat/testInputs"
db_name = "database_basexdb_ref"
scenarios = 'Reference'
final_year = 2025
prj_name = "my_prj.dat"
dbPath = db_path
dbFile = db_name
miclasspath=NULL
migabble = FALSE
validatedb=TRUE
maxMemory="4g"
if(is.null(miclasspath)) {
miclasspath = DEFAULT.MICLASSPATH()
}
DEFAULT.MICLASSPATH <- function() paste(
file.path(system.file("ModelInterface", "jars", package="rgcam"),
"*"),
file.path(system.file("ModelInterface", "ModelInterface.jar",
package="rgcam")),
sep = .Platform$path.sep)
if(is.null(miclasspath)) {
miclasspath = DEFAULT.MICLASSPATH()
}
db_inst <- structure(
list(miclasspath=miclasspath, dbPath=normalizePath(dbPath), dbFile=dbFile, migabble=migabble, maxMemory=maxMemory),
class="localDBConn")
dbscen <- listScenariosInDB(db_inst)
library(rgcam)
dbscen <- listScenariosInDB(db_inst)
project_path = 'test6.dat'
load_project(project_path)
library(gcamreport)
load_project(project_path)
final_year = 2030
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns:
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <<- data.frame('name' =
c('population_clean', 'GDP_MER_clean', 'GDP_PPP_clean',
'global_temp_clean', 'forcing_clean', 'co2_concentration_clean',
'co2_emissions_clean', 'tot_co2_clean', 'co2_sequestration_clean',
'ag_demand_clean', 'land_clean',
'primary_energy_clean', 'energy_trade_clean',
'elec_gen_tech_clean', 'elec_capacity_tot_clean', 'elec_capacity_add_clean',
'se_gen_tech_clean', 'fe_sector_clean',
'energy_service_transportation_clean',
'energy_service_buildings_clean',
'ag_prices_clean', 'industry_production_clean',
'elec_capital_clean',
'elec_investment_clean', 'transmission_invest_clean', 'CCS_invest_clean', 'resource_investment_clean',
'nonco2_clean',
'co2_price_clean'),
'required' = TRUE,
stringsAsFactors = FALSE)
variables <<- variables_base
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
source("~/IAM_COMPACT/gcamreport/R/main.R")
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
# for all desired variables, load the corresponding data
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
cf_gcam
head(elec_cf)
View(elec_cf)
