dplyr::group_by(var) %>%
dplyr::summarise(EJ = sum(value, na.rm = T)) %>%
dplyr::ungroup()
tmp2 <- get(paste('iea_capacity',GCAM_version,sep='_'), envir = asNamespace("gcamreport")) %>%
dplyr::filter(period == 2020, scenario == "Current Policies Scenario") %>%
dplyr::mutate(
variable = gsub("Capacity\\|Electricity\\|CSP", "Capacity\\|Electricity\\|Solar\\|CSP", variable),
variable = gsub("Capacity\\|Electricity\\|Biomass", "Capacity\\|Electricity\\|Biomass\\|w/o CCS", variable),
variable = gsub("Capacity\\|Electricity\\|Coal", "Capacity\\|Electricity\\|Coal\\|w/o CCS", variable),
variable = gsub("Capacity\\|Electricity\\|Gas", "Capacity\\|Electricity\\|Gas\\|w/o CCS", variable),
variable = gsub("Capacity\\|Electricity\\|Oil", "Capacity\\|Electricity\\|Oil\\|w/o CCS", variable),
variable = gsub("Capacity", "Secondary Energy", variable)
)
if (sum(unique(tmp1$var) %in% unique(tmp2$variable)) != 12) {
handle_warning(mapping_name1 = 'iea_capacity', query_name = 'elec gen by gen tech')
}
devtools::load_all()
generate_report(
prj_name = 'examples/database_basexdb_2100_prj_study1_rep.dat',
final_year = 2030
)
devtools::load_all()
generate_report(
prj_name = 'examples/database_basexdb_2100_prj_study1_rep.dat',
final_year = 2030
)
library(gcamreport)
library(testthat)
library(magrittr)
test_that("Test9_v6. CO2 Price", {
# # World CO2 price - TODO
# generate_report(
#   prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_CO2price_test.dat"),
#   desired_variables = c("Price|Carbon*"),
#   launch_ui = FALSE,
#   GCAM_version = 'v6.0'
# )
# testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_6.0/result_test9.1.RData")))
# testthat::expect_equal(report, testResult)
# rm(list = ls())
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE,
GCAM_version = 'v6.0'
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_6.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
})
devtools::load_all()
test_that("Test9_v6. CO2 Price", {
# # World CO2 price - TODO
# generate_report(
#   prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_CO2price_test.dat"),
#   desired_variables = c("Price|Carbon*"),
#   launch_ui = FALSE,
#   GCAM_version = 'v6.0'
# )
# testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_6.0/result_test9.1.RData")))
# testthat::expect_equal(report, testResult)
# rm(list = ls())
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE,
GCAM_version = 'v6.0'
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_6.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
})
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE,
GCAM_version = 'v6.0'
)
co2_price_fragmented <<-
co2_price_fragmented_pre %>%
left_join_strict(CO2_market_filteredReg, by = c("market"), multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
dplyr::mutate(value = value /
get(paste('convert',GCAM_version,sep='_'), envir = asNamespace("gcamreport"))[['conv_C_CO2']] *
get(paste('convert',GCAM_version,sep='_'), envir = asNamespace("gcamreport"))[['conv_90USD_10USD']]
) %>%
dplyr::mutate(market_adj = "CO2") %>%
# consider the value sum of by market
dplyr::group_by(Units, scenario, year, market_adj, region) %>%
dplyr::mutate(value = sum(value)) %>%
dplyr::ungroup() %>%
dplyr::select(-market) %>%
dplyr::distinct() %>%
tidyr::pivot_wider(names_from = "market_adj", values_from = "value") %>%
left_join_strict(
co2_price_share_bysec %>%
dplyr::select(-year),
by = c("scenario", "region")
) %>%
dplyr::mutate(value = CO2) %>%
dplyr::select(Units, scenario, year, region, value, CO2, sector) %>%
left_join_strict(filter_variables(get(paste('co2_market_frag_map',GCAM_version,sep='_'), envir = asNamespace("gcamreport")), "co2_price_fragmented"), by = "sector", multiple = "all") %>%
dplyr::filter(stats::complete.cases(.)) %>%
tidyr::complete(tidyr::nesting(scenario, var, year, market, Units), region = regions.global, fill = list(value = 0)) %>%
dplyr::select(all_of(gcamreport::long_columns))
unique(co2_price_fragmented_pre$market)%in% unique(CO2_market_filteredReg$market)
unique(co2_price_fragmented_pre$market)
source("~/IAM_COMPACT/gcamreport/inst/extdata/saveDataFiles_GCAM7.0.R")
source("~/IAM_COMPACT/gcamreport/inst/extdata/saveDataFiles_GCAM6.0.R")
source("~/IAM_COMPACT/gcamreport/inst/extdata/saveDataFiles_GCAM7.1.R")
library(gcamreport)
devtools::load_all()
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_6.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE,
GCAM_version = 'v6.0'
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_6.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
test_that("Test9_v7. CO2 Price", {
# World CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_CO2price_test.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.1.RData")))
testthat::expect_equal(report, testResult)
rm(list = ls())
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
})
devtools::load_all()
test_that("Test9_v7. CO2 Price", {
# World CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_CO2price_test.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.1.RData")))
testthat::expect_equal(report, testResult)
rm(list = ls())
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
})
# compute Global value using the emission weights
co2_price_world <- co2_price_regional %>%
left_join_strict(co2_price_share_bysec %>%
left_join_strict(filter_variables(get(paste('co2_market_frag_map',GCAM_version,sep='_'), envir = asNamespace("gcamreport")), "co2_price_fragmented"),
by = "sector", multiple = "all") %>%
dplyr::select(-sector,-market,-year),
by = c('region','scenario','var')) %>%
dplyr::mutate(weighted_value = value * share_CO2) %>%
dplyr::group_by(scenario, var, year) %>%
dplyr::summarise(value = sum(weighted_value)) %>%
dplyr::ungroup() %>%
dplyr::mutate(region = "Global")
# compute Global value using the emission weights
co2_price_world <- co2_price_regional %>%
left_join_strict(co2_price_share_bysec %>%
left_join_strict(filter_variables(get(paste('co2_market_frag_map',GCAM_version,sep='_'), envir = asNamespace("gcamreport")), "co2_price_fragmented"),
by = "sector", multiple = "all") %>%
dplyr::select(-sector,-market,-year),
by = c('region','scenario','var')) %>%
dplyr::mutate(weighted_value = value * share_CO2) %>%
dplyr::group_by(scenario, var, year) %>%
dplyr::summarise(value = sum(weighted_value)) %>%
dplyr::ungroup() %>%
dplyr::mutate(region = "Global")
test_that("Test10_v7. vetting", {
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.10.1_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|CH4*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test10.1.RData")))
testthat::expect_equal(vetting_summary, testResult)
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.10.2_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|Sulfur*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test10.2.RData")))
testthat::expect_equal(vetting_summary, testResult)
rm(list = ls())
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.10.3_test.dat",
scenarios = "Reference",
final_year = 2050,
desired_regions = "South Africa",
desired_variables = c("Final Energy*"),
launch_ui = FALSE
)
testthat::expect(exists("vetting_summary"), "Vetting performed when not all regions were selected")
})
test_that("Test9_v7. CO2 Price", {
# World CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_CO2price_test.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.1.RData")))
testthat::expect_equal(report, testResult)
rm(list = ls())
# Regional CO2 price
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_policy.dat"),
desired_variables = c("Price|Carbon*"),
launch_ui = FALSE
)
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test9.2.RData")))
testthat::expect_equal(report, testResult)
})
test_that("Test12_v7. other functions", {
# gather_map
co2_sector_map <- read.csv(file.path(rprojroot::find_root(rprojroot::is_testthat), "inst/extdata/mappings/GCAM7.0", "CO2_sector_map.csv"),
skip = 1, na = "",
stringsAsFactors = FALSE
) %>% gather_map()
testExpect <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test12.1.RData")))
testthat::expect_equal(co2_sector_map, testExpect)
# approx_fun
expect_error(
approx_fun(2030, 3, rule = 3),
"Use fill_exp_decay_extrapolate!"
)
# get_iron_steel_map & get_co2_iron_steel
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
final_year = 2050,
scenarios = "Reference",
desired_regions = "USA",
desired_variables = "Emissions|CO2|Energy|Demand|Industry|Steel",
launch_ui = FALSE
)
testExpect <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test12.2.RData")))
testthat::expect_equal(report, testExpect)
# get_ghg
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/test7.dat"),
final_year = 2050,
scenarios = "Reference",
desired_regions = "USA",
desired_variables = "Emissions|Kyoto Gases*",
launch_ui = FALSE
)
testExpect <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test12.3.RData")))
testthat::expect_equal(report, testExpect)
# get_regional_emission
testResult <- get_regional_emission()
testExpect <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test12.4.RData")))
testthat::expect_equal(testResult, testExpect)
})
test_that("Test11_v7. scenarios", {
# check when creating project
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.1_p1.dat",
scenarios = c("dummy", "Reference"),
launch_ui = FALSE
),
"The desired scenario dummy is not present in the database."
)
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.2_p1.dat",
scenarios = c("dummy1", "dummy2", "Reference"),
launch_ui = FALSE
),
"The desired scenarios dummy1, dummy2 are not present in the database."
)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.3_test_scenarios.dat",
final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|CH4*"),
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("Reference", testResult)
# check when loading project
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.4_test_scenarios.dat",
scenarios = c("dummy", "Reference"),
launch_ui = FALSE
),
"The desired scenario dummy is not present in the database"
)
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.5_test_scenarios.dat",
scenarios = c("dummy1", "dummy2", "Reference"),
launch_ui = FALSE
),
"The desired scenarios dummy1, dummy2 are not present in the database"
)
expect_error(
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.5_test.dat",
scenarios = c("dummy1", "dummy2", "Reference"),
launch_ui = FALSE
),
"The desired scenarios dummy1, dummy2 are not present in the database"
)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.6_test_scenarios.dat",
final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|CH4*"),
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("Reference", testResult)
generate_report(
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0"),
db_name = "database_basexdb_ref",
prj_name = "gcamv7.11.7_test_scenarios",
final_year = 2050,
desired_regions = "All",
desired_variables = c("Emissions|CH4*"),
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("Reference", testResult)
generate_report(
prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/database_basexdb_test_scenarios7.dat"),
final_year = 2050,
scenarios = "CP_EI_recovery",
desired_regions = "USA",
desired_variables = "Emissions|CH4*",
launch_ui = FALSE
)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal("CP_EI_recovery", testResult)
})
test_that("Test13_v7. specify queries", {
# transform_to_xml ancillary function
testResult <- transform_to_xml(gcamreport::queries_nonCO2_v7.0)
testExpect <- xml2::read_xml(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test13.1.xml"))
testthat::expect_equal(testResult, testExpect)
# generate standardize report specifying the query file
db_path <- file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0")
db_name <- "database_basexdb_ref"
prj_name <- "gcamv7.0_test_specify_queries.dat"
scenarios <- "Reference"
generate_report(db_path = db_path, db_name = db_name, prj_name = prj_name,
scenarios = scenarios, final_year = 2050, desired_variables = c('Price|Carbon*'),
save_output = T, launch_ui = F,
queries_general_file = file.path(rprojroot::find_root(rprojroot::is_testthat), "inst/extdata/queries/GCAM7.0/queries_gcamreport_general.xml"))
testResult <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.0/gcamv7.0_test_specify_queries_standardized.RData")))
testExpect <- get(load(file.path(rprojroot::find_root(rprojroot::is_testthat), "testOutputs/v_7.0/result_test13.2.RData")))
testthat::expect_equal(testResult, testExpect)
})
``` r
devtools::load_all()
```
devtools::load_all()
dbpath <- "examples"
dbname <- "database_basexdb_ref"
scen <- "Reference"
dbpath <- 'tests/testthat/testInputs/v_7.1'
dbpath <- "examples"
dbname <- "database_basexdb_ref"
scen <- "Reference"
prjname <- "example1_v7.1.dat"
available_GCAM_versions
GCAMv <- "v7.1
""
GCAMv <- "v7.1"
generate_report(db_path = dbpath, db_name = dbname, scenarios = scen,
prj_name = prjname, final_year = 2050, GCAM_version = GCAMv,
desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'),
save_output = TRUE, launch_ui = TRUE)
dbpath <- 'tests/testthat/testInputs/v_7.1'
dbname <- "database_basexdb_ref"
scen <- "Reference"
GCAMv <- "v7.1"
prjname <- "example1_v7.1.dat"
generate_report(db_path = dbpath, db_name = dbname, scenarios = scen,
prj_name = prjname, final_year = 2050, GCAM_version = GCAMv,
desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'),
save_output = TRUE, launch_ui = TRUE)
dbpath <- 'tests/testthat/testInputs/v_6.0'
GCAMv = 'v6.0'
generate_report(db_path = dbpath, db_name = dbname, scenarios = scen,
prj_name = prjname, final_year = 2050, GCAM_version = GCAMv,
desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'),
save_output = TRUE, launch_ui = TRUE)
prjname <- "examples/example2_v7.1.dat"
generate_report(prj_name = prjname, final_year = 2050,
GCAM_version = 'v7.1',
desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'),
save_output = TRUE, launch_ui = TRUE)
available_GCAM_versions
available_GCAM_versions(print = F)
available_GWP_versions
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
package_version(dplyr)
package_version(gcamreport)
library(gcamreport)
library(dplyr)
package_version(gcamreport)
library(dplyr)
library(dplyr)
package_version(dplyr)
packageVersion(dplyr)
packageVersion('dplyr')
packageVersion('gcamreport')
packageVersion('data.table')
pkgdown::build_site()
devtools::load_all()
generate_report(prj_name = file.path(rprojroot::find_root(rprojroot::is_testthat), "testInputs/v_7.1/test7.1.dat"),
launch_ui = FALSE, GCAM_version = 'v7.0')
source("~/IAM_COMPACT/gcamreport/inst/extdata/saveDataFiles_GCAM7.0.R")
pkgdown::build_site()
pkgdown::build_site()
library(gcamreport)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
.Last.error
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
wegited.median
weigted.median
spatstat.geom::weighted.median()
spatstat.geom::weighted.median(2)
spatstat.geom::weighted.median(2,1)
spatstat.geom::weighted.median(2,2)
pkgdown::build_site()
