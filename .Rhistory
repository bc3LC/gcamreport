prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = 'Final|Energy*',
launch_ui = FALSE),
"There is no variable containing the pattern Final|Energy* available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = c('Final|Energy*','Emissions|CH4*'),
launch_ui = FALSE),
"There is no variable containing the pattern Final|Energy* available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_regions = 'dummy region',
launch_ui = FALSE),
"The desired region dummy region is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_regions = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired region dummy region is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_regions = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired regions dummy1, dummy2 are not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = 'dummy continent',
launch_ui = FALSE),
"You specified the continent/regions' group dummy continent which is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = 'dummy continent',
launch_ui = FALSE),
"The desired continent/regions' group dummy continent is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired continent/regions' group dummy continent is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired continent/regions' groups dummy1, dummy2 are not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
launch_ui = FALSE),
"If db_path, prj_name are specified, db_name must also be specified.")
expect_error(generate_report(project_path = 'dummy name',
db_path = 'dummy name',
launch_ui = FALSE),
"Specify either a project or a database to extract the data from. Not both.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_regions = 'dummy region',
desired_continents = 'dummy continent',
launch_ui = FALSE),
"You specified both the desired_regions and the desired_continents parameters. Only one can be specified at a time.")
source("~/IAM_COMPACT/gcamreport/R/main.R")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = 'dummy variable',
launch_ui = FALSE),
"The variable dummy variable is not available for reporting")
library(gcamreport)
library(gcamreport); library(testthat); library(magrittr)
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = 'dummy variable',
launch_ui = FALSE),
"The variable dummy variable is not available for reporting")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The variables dummy1, dummy2 are not available for reporting")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = 'Final|Energy*',
launch_ui = FALSE),
"There is no variable containing the pattern Final|Energy* available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_variables = c('Final|Energy*','Emissions CH4*'),
launch_ui = FALSE),
"There is no variable containing the pattern Final|Energy* available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_regions = 'dummy region',
launch_ui = FALSE),
"The desired region dummy region is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_noCreated.dat',
scenarios = 'Reference',
desired_regions = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired regions dummy1, dummy2 are not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = 'dummy continent',
launch_ui = FALSE),
"The desired continent/regions' group dummy continent is not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_continents = c('dummy1', 'dummy2'),
launch_ui = FALSE),
"The desired continent/regions' groups dummy1, dummy2 are not available for reporting.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
launch_ui = FALSE),
"If db_path, prj_name are specified, db_name must also be specified.")
expect_error(generate_report(project_path = 'dummy name',
db_path = 'dummy name',
launch_ui = FALSE),
"Specify either a project or a database to extract the data from. Not both.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = 'Reference',
desired_regions = 'dummy region',
desired_continents = 'dummy continent',
launch_ui = FALSE),
"You specified both the desired_regions and the desired_continents parameters. Only one can be specified at a time.")
# check when creating project
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = c('dummy', 'Reference'),
launch_ui = FALSE),
"The desired scenario dummy is not present in the database.")
library(gcamreport)
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_p1.dat',
scenarios = c('dummy1', 'dummy2', 'Reference'),
launch_ui = FALSE),
"The desired scenarios dummy1, dummy2 are not present in the database.")
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test_scenarios.dat',
final_year = 2050,
desired_regions = 'All',
desired_variables = c('Emissions|CH4*'),
launch_ui = FALSE)
# check when loading project
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test_scenarios.dat',
scenarios = c('dummy', 'Reference'),
launch_ui = FALSE),
"The desired scenario dummy is not present in the loaded project.")
expect_error(generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test_scenarios.dat',
scenarios = c('dummy1', 'dummy2', 'Reference'),
launch_ui = FALSE),
"The desired scenarios dummy1, dummy2 are not present in the loaded project.")
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb_ref',
prj_name = 'gcamv7.0_test_scenarios.dat',
final_year = 2050,
desired_regions = 'All',
desired_variables = c('Emissions|CH4*'),
launch_ui = FALSE)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal('Reference', testResult)
for (c('aa','bb','cc') in c('aa','bb')) print(elem)
for (c('aa','bb','cc') %in%c('aa','bb')) print(elem)
x = c('aa','bb','cc')
x
y = c('aa','bb')
for (i in interaction(x,y)) print(i)
for (i in intersect(x,y)) print(i)
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb_test_scenarios7',
prj_name = 'test_scenarios7.dat',
final_year = 2050,
desired_scenarios = c('Reference','CP_EI_recovery'),
desired_regions = 'USA',
desired_variables = 'Emissions|CH4*',
launch_ui = FALSE)
#' Load specified project into the global environment
#' @param project_path path of the project (including project name and extension).
#' @param desired_regions desired regions to consider. By default, 'All'. Otherwise, specify a vector with all the considered regions.
#' To know all possible regions, run `available_regions()`. ATTENTION: the considered regions will make up "World".
#' In case the project dataset needs to be created, it will be produced with only the specified regions.
#' @param scenarios desired scenarios.
#' @return loaded project into global environment.
#' @importFrom rgcam addSingleQuery localDBConn listScenarios loadProject dropScenarios
#' @importFrom dplyr intersect setdiff if_else
#' @export
load_project <- function(project_path, desired_regions = "All", scenarios) {
print("Loading project...")
# load the project
prj <- loadProject(project_path)
# filter the regions if not all of them are considered (desired_regions != 'All')
if (!(identical(desired_regions, "All"))) {
# for all scenarios in prj
for (s in names(prj)) {
# for all variables in prj
for (v in names(prj[[s]])) {
prj[[s]][[v]] <- filter_loading_regions(prj[[s]][[v]], desired_regions, v)
}
}
}
if (is.null(scenarios)) {
scenarios.global <<- listScenarios(prj)
} else {
scenarios.global <<- intersect(scenarios,listScenarios(prj))
# check the user input
if (length(scenarios) > length(scenarios.global)) {
check_scen <- setdiff(scenarios,listScenarios(prj))
tmp <- paste(check_scen, collapse = ', ')
if (length(check_scen) > 1) stop("The desired scenarios ",tmp, " are not present in the loaded project.\n")
if (length(check_scen) == 1) stop("The desired scenario ",tmp, " is not present in the loaded project.\n")
}
# drop unnecessary scenarios
for (i in intersect(check_scen,listScenarios(prj))) {
prj <- dropScenarios(prj, i)
}
}
prj <<- prj
}
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb_test_scenarios7',
prj_name = 'test_scenarios7.dat',
final_year = 2050,
scenarios = c('Reference','CP_EI_recovery'),
desired_regions = 'USA',
desired_variables = 'Emissions|CH4*',
launch_ui = FALSE)
db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0')
db_name = 'database_basexdb_test_scenarios7'
prj_name = 'test_scenarios7.dat'
final_year = 2050
scenarios = c('Reference','CP_EI_recovery')
desired_regions = 'USA'
scenarios = 'CP_EI_recovery'
desired_variables = 'Emissions|CH4*'
project_path = NULL
# check that desired_regions and desired_continents are not specified at the same time
if (!(identical(desired_regions, "All"))) {
if (!(identical(desired_continents, "All"))) {
stop("You specified both the desired_regions and the desired_continents parameters. Only one can be specified at a time.\n")
}
}
desired_continents = "All"
# check that desired_regions and desired_continents are not specified at the same time
if (!(identical(desired_regions, "All"))) {
if (!(identical(desired_continents, "All"))) {
stop("You specified both the desired_regions and the desired_continents parameters. Only one can be specified at a time.\n")
}
}
# check that the desired_regions are available
if (!(identical(desired_regions, "All"))) {
check_reg <- setdiff(desired_regions, available_regions(print = FALSE))
if (length(check_reg) > 0) {
tmp <- paste(check_reg, collapse = ', ')
if (length(check_reg) > 1) stop(paste0("The desired regions ", tmp, " are not available for reporting.\n"))
if (length(check_reg) == 1) stop(paste0("The desired region ", tmp, " is not available for reporting.\n"))
}
}
# check that the desired_continents are available
if (!(length(desired_continents) == 1 && desired_continents == "All")) {
check_cont <- setdiff(desired_continents, available_continents(print = FALSE))
if (length(check_cont) > 0) {
tmp <- paste(check_cont, collapse = ', ')
if (length(check_cont) > 1) stop(paste0("The desired continent/regions' groups ", tmp, " are not available for reporting.\n"))
if (length(check_cont) == 1) stop(paste0("The desired continent/regions' group ", tmp, " is not available for reporting.\n"))
}
desired_regions <- gcamreport::reg_cont %>%
filter(continent %in% desired_continents) %>%
pull(region)
}
# check that the desired_variables are available
if (!(length(desired_variables) == 1 && desired_variables == "All")) {
original_desired_variables <- desired_variables
# consider the * symbol
contains_star <- grepl("\\*", desired_variables)
if (sum(contains_star) > 0) {
contains_star <- desired_variables[contains_star]
avail_variables <- available_variables(F)
no_pattern <- c()
for (elem in contains_star) {
pattern <- sub("\\*.*", "", elem)
tmp <- c(desired_variables, start_with_pattern(avail_variables, pattern))
# check user input
if (length(desired_variables) == length(tmp)) no_pattern <- c(no_pattern, elem)
desired_variables <- tmp
}
if (length(no_pattern) > 1) stop(paste0("There are no variables containing the patterns ", paste(no_pattern, collapse = ', '), " available for reporting.\n"))
if (length(no_pattern) == 1) stop(paste0("There is no variable containing the pattern ", no_pattern, " available for reporting.\n"))
# remove elements containing '*'
contains_star <- grepl("\\*", desired_variables)
desired_variables <- setdiff(desired_variables,desired_variables[contains_star])
}
# check the user input
check_var <- setdiff(desired_variables, available_variables(print = FALSE))
if (length(check_var) > 0) {
tmp <- paste(check_var, collapse = ', ')
if (length(check_var) > 1) stop(paste0("The variables ", tmp, " are not available for reporting.\n"))
if (length(check_var) == 1) stop(paste0("The variable ", tmp, " is not available for reporting.\n"))
}
if (length(desired_variables) == 0) {
tmp <- paste(original_desired_variables, collapse = ', ')
if (length(original_desired_variables) > 1) stop(paste0("The variables ", tmp, " are not available for reporting.\n"))
if (length(original_desired_variables) == 1) stop(paste0("The variable ", tmp, " is not available for reporting.\n"))
}
}
desired_variables
!is.null(project_path) && (!is.null(db_path) || !is.null(db_name) || !is.null(prj_name))
!is.null(project_path)
!is.null(db_path) || !is.null(db_name) || !is.null(prj_name)
db_path
db_name
prj_name
scenarios
desired_variables
desired_regions
# check if the project already exists
file_name <- file.path(db_path, paste(db_name, prj_name, sep = "_"))
file_name
db_name = 'database_basexdb'
# check if the project already exists
file_name <- file.path(db_path, paste(db_name, prj_name, sep = "_"))
file_name
file.exists(file_name)
file_name
desired_regions
scenarios
# load the project
prj <- loadProject(project_path)
library(rgcam)
# load the project
prj <- loadProject(project_path)
project_path
project_path = file_name
# load the project
prj <- loadProject(project_path)
!(identical(desired_regions, "All"))
names(prj)
s = names(prj)[1]
names(prj[[s]])
# filter the regions if not all of them are considered (desired_regions != 'All')
if (!(identical(desired_regions, "All"))) {
# for all scenarios in prj
for (s in names(prj)) {
# for all variables in prj
for (v in names(prj[[s]])) {
prj[[s]][[v]] <- filter_loading_regions(prj[[s]][[v]], desired_regions, v)
}
}
}
is.null(scenarios)
scenarios
listScenarios(prj)
scenarios.global <<- intersect(scenarios,listScenarios(prj))
scenarios.global
length(scenarios) > length(scenarios.global)
intersect(check_scen,listScenarios(prj))
intersect(setdiff(scenarios,listScenarios(prj)),listScenarios(prj))
setdiff(scenarios,listScenarios(prj))
scenarios
listScenarios(prj)
setdiff(scenarios,listScenarios(prj))
listScenarios(prj)[listScenarios(prj) %in% scenarios]
listScenarios(prj)[!listScenarios(prj) %in% scenarios]
listScenarios(prj)[!listScenarios(prj) %in% scenarios]
# drop unnecessary scenarios
for (i in listScenarios(prj)[!listScenarios(prj) %in% scenarios]) {
prj <- dropScenarios(prj, i)
}
listScenarios(prj)
prj
# load the project
prj <- loadProject(project_path)
#' Load specified project into the global environment
#' @param project_path path of the project (including project name and extension).
#' @param desired_regions desired regions to consider. By default, 'All'. Otherwise, specify a vector with all the considered regions.
#' To know all possible regions, run `available_regions()`. ATTENTION: the considered regions will make up "World".
#' In case the project dataset needs to be created, it will be produced with only the specified regions.
#' @param scenarios desired scenarios.
#' @return loaded project into global environment.
#' @importFrom rgcam addSingleQuery localDBConn listScenarios loadProject dropScenarios
#' @importFrom dplyr intersect setdiff if_else
#' @export
load_project <- function(project_path, desired_regions = "All", scenarios) {
print("Loading project...")
# load the project
prj <- loadProject(project_path)
# filter the regions if not all of them are considered (desired_regions != 'All')
if (!(identical(desired_regions, "All"))) {
# for all scenarios in prj
for (s in names(prj)) {
# for all variables in prj
for (v in names(prj[[s]])) {
prj[[s]][[v]] <- filter_loading_regions(prj[[s]][[v]], desired_regions, v)
}
}
}
if (is.null(scenarios)) {
scenarios.global <<- listScenarios(prj)
} else {
scenarios.global <<- intersect(scenarios,listScenarios(prj))
# check the user input
if (length(scenarios) > length(scenarios.global)) {
check_scen <- setdiff(scenarios,listScenarios(prj))
tmp <- paste(check_scen, collapse = ', ')
if (length(check_scen) > 1) stop("The desired scenarios ",tmp, " are not present in the loaded project.\n")
if (length(check_scen) == 1) stop("The desired scenario ",tmp, " is not present in the loaded project.\n")
}
# drop unnecessary scenarios
for (i in listScenarios(prj)[!listScenarios(prj) %in% scenarios]) {
prj <- dropScenarios(prj, i)
}
}
prj <<- prj
}
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb',
prj_name = 'test_scenarios7.dat',
final_year = 2050,
scenarios = 'CP_EI_recovery',
desired_regions = 'USA',
desired_variables = 'Emissions|CH4*',
launch_ui = FALSE)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal('CP_EI_recovery', testResult)
testResult
library(gcamreport)
library(gcamreport); library(testthat); library(magrittr)
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb',
prj_name = 'test_scenarios7.dat',
final_year = 2050,
scenarios = 'CP_EI_recovery',
desired_regions = 'USA',
desired_variables = 'Emissions|CH4*',
launch_ui = FALSE)
testResult <- rgcam::listScenarios(prj)
testResult
testthat::expect_equal('CP_EI_recovery', testResult)
generate_report(db_path = file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0'),
db_name = 'database_basexdb',
prj_name = 'test_scenarios7.dat',
final_year = 2050,
scenarios = 'CP_EI_recovery',
desired_regions = 'USA',
desired_variables = 'Emissions|CH4*',
launch_ui = FALSE)
testResult <- rgcam::listScenarios(prj)
testthat::expect_equal('CP_EI_recovery', testResult)
library(gcamreport)
testResult <- as.numeric(length(load_project(file.path(rprojroot::find_root(rprojroot::is_testthat),'testInputs/v_7.0/test7.dat'))))
library(gcamreport)
library(gcamreport)
style_dir(getwd())
library(styler)
style_dir(getwd())
library(gcamreport)
# generate report
covr::package_coverage() -> x
# view coverage
print(x)
# save coverage to an xml file
covr::to_cobertura(x, file = "coverage.xml")
# generate report
covr::package_coverage() -> x
# view coverage
print(x)
# save coverage to an xml file
covr::to_cobertura(x, file = "coverage.xml")
pkgdown::build_site()
pkgdown::build_site()
