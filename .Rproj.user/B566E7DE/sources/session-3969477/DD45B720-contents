devtools::load_all()
rcmdcheck::rcmdcheck()-> x
x$errors
print(x$errors)
library(gcamreport)
devtools::load_all()
rcmdcheck::rcmdcheck()-> x
devtools::load_all()
library(gcamreport)
devtools::load_all()
rcmdcheck::rcmdcheck()-> x
devtools::load_all()
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("Step_By_Step_Full_Example_gcamreport_v6.0*")
usethis::use_vignette("Step_By_Step_Full_Example_gcamreport_v6.0")
usethis::use_vignette("Step_By_Step_Full_Example_gcamreport_v6-0")
usethis::use_vignette("Dataset_Generation_Tutorial_gcamreport_v6-0")
usethis::use_vignette("Interactive_UI_Tutorial_gcamreport_v6-0")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
covr::codecov()->x
covr::package_coverage() -> x
library(gcamreport); library(testthat); library(magrittr); library(rprojroot)
generate_report(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE)
devtools::load_all()
library(gcamreport)
generate_report(project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat'), launch_ui = FALSE)
# load data
data = final_data
project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat')
desired_variables = 'All'
desired_regions = 'All'
desired_continents = 'All'
final_year = 2100
scenarios = NULL
prj_name = NULL
db_name = NULL
db_path = NULL
save_output = TRUE
output_file = NULL
# check that the desired_regions are available
if (!(length(desired_regions) == 1 && desired_regions == 'All')) {
check_reg = setdiff(desired_regions, available_regions(print = FALSE))
if (length(check_reg) > 0) {
stop(paste0('ERROR: You specified the region ',check_reg, ' which is not available for reporting.\n'))
}
}
# check that the desired_continents are available
if (!(length(desired_continents) == 1 && desired_continents == 'All')) {
check_cont = setdiff(desired_continents, available_continents(print = FALSE))
if (length(check_cont) > 0) {
stop(paste0("ERROR: You specified the continent/regions' group ",check_cont, ' which is not available for reporting.\n'))
}
desired_regions = reg_cont %>%
dplyr::filter(continent %in% desired_continents) %>%
dplyr::pull(region)
}
# check that the desired_variables are available
if (!(length(desired_variables) == 1 && desired_variables == 'All')) {
original_desired_variables = desired_variables
# consider the * symbol
contains_star = grepl('\\*', desired_variables)
if (sum(contains_star) > 0) {
contains_star = desired_variables[contains_star]
avail_variables = available_variables(F)
for (elem in contains_star) {
pattern = sub("\\*.*", "", elem)
desired_variables = c(desired_variables, start_with_pattern(avail_variables,pattern))
}
# remove elements containing '*'
contains_star = grepl('\\*', desired_variables)
desired_variables = desired_variables[-contains_star]
}
# check the user input
check_var = setdiff(desired_variables, available_variables(print = FALSE))
if (length(check_var) > 0) {
stop(paste0("ERROR: You specified the variable ",check_var, ' which is not available for reporting.\n'))
}
if (length(desired_variables) == 0) {
stop(paste0("ERROR: You specified the variable ",original_desired_variables, ' which is not available for reporting.\n'))
}
}
# check that the paths are correctly specified
if (!is.null(project_path) && (!is.null(db_path) || !is.null(db_name) || !is.null(prj_name) || !is.null(scenarios))) {
# stop and display error
stop('ERROR: Specify either a project or a database to extract the data from. Not both.')
} else if (!is.null(project_path)) {
# load project
load_project(project_path, desired_regions)
} else if (!is.null(db_path) || !is.null(db_name) || !is.null(prj_name) || !is.null(scenarios)) {
# create project if checks ok
# check that all the paths are specified
if (is.null(db_path) || is.null(db_name) || is.null(prj_name) || is.null(scenarios)) {
null_items = c()
not_null_items = c()
for (item in c('db_path','db_name','prj_name','scenarios')) {
if (is.null(eval(parse(text=item)))) {
null_items = c(null_items, item)
} else {
not_null_items = c(not_null_items, item)
}
}
# stop and display error
if (length(not_null_items) > 1) {
stop("If ", paste(not_null_items, collapse = ', '), " are specified, ", paste(null_items, collapse = ', '), " must also be specified.")
} else {
stop("If ", paste(not_null_items, collapse = ', '), " is specified, ", paste(null_items, collapse = ', '), " must also be specified.")
}
} else {
# create project
create_project(db_path, db_name, prj_name, scenarios,
desired_regions, desired_variables)
}
} else {
# stop and display error
stop('ERROR: Specify either a project or a database to extract the data from.')
}
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <- data.frame('name' = unique(template$Internal_variable)[!is.na(unique(template$Internal_variable)) & unique(template$Internal_variable) != ""],
'required' = TRUE,
stringsAsFactors = FALSE)
# consider only the desired variables
if (length(desired_variables) == 1 && desired_variables == 'All') {
variables <<- variables_base
} else {
variables <<- variables_base %>%
dplyr::mutate(required = dplyr::if_else(
!name %in% unique(template %>%
dplyr::filter(Variable %in% desired_variables) %>%
dplyr::pull(Internal_variable)),
FALSE, required))
}
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
# for all desired variables, load the corresponding data
loaded_internal_variables <<- c()
desired_regions <<- desired_regions
desired_variables <<- desired_variables
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
devtools::load_all()
desired_variables = 'All'
desired_regions = 'All'
desired_continents = 'All'
final_year = 2100
scenarios = NULL
prj_name = NULL
db_name = NULL
db_path = NULL
project_path = paste0(rprojroot::find_root(rprojroot::is_testthat),'/testInputs/v_7.0/test7.dat')
# check that the desired_regions are available
if (!(length(desired_regions) == 1 && desired_regions == 'All')) {
check_reg = setdiff(desired_regions, available_regions(print = FALSE))
if (length(check_reg) > 0) {
stop(paste0('ERROR: You specified the region ',check_reg, ' which is not available for reporting.\n'))
}
}
# check that the desired_continents are available
if (!(length(desired_continents) == 1 && desired_continents == 'All')) {
check_cont = setdiff(desired_continents, available_continents(print = FALSE))
if (length(check_cont) > 0) {
stop(paste0("ERROR: You specified the continent/regions' group ",check_cont, ' which is not available for reporting.\n'))
}
desired_regions = reg_cont %>%
dplyr::filter(continent %in% desired_continents) %>%
dplyr::pull(region)
}
# check that the desired_variables are available
if (!(length(desired_variables) == 1 && desired_variables == 'All')) {
original_desired_variables = desired_variables
# consider the * symbol
contains_star = grepl('\\*', desired_variables)
if (sum(contains_star) > 0) {
contains_star = desired_variables[contains_star]
avail_variables = available_variables(F)
for (elem in contains_star) {
pattern = sub("\\*.*", "", elem)
desired_variables = c(desired_variables, start_with_pattern(avail_variables,pattern))
}
# remove elements containing '*'
contains_star = grepl('\\*', desired_variables)
desired_variables = desired_variables[-contains_star]
}
# check the user input
check_var = setdiff(desired_variables, available_variables(print = FALSE))
if (length(check_var) > 0) {
stop(paste0("ERROR: You specified the variable ",check_var, ' which is not available for reporting.\n'))
}
if (length(desired_variables) == 0) {
stop(paste0("ERROR: You specified the variable ",original_desired_variables, ' which is not available for reporting.\n'))
}
}
# check that the paths are correctly specified
if (!is.null(project_path) && (!is.null(db_path) || !is.null(db_name) || !is.null(prj_name) || !is.null(scenarios))) {
# stop and display error
stop('ERROR: Specify either a project or a database to extract the data from. Not both.')
} else if (!is.null(project_path)) {
# load project
load_project(project_path, desired_regions)
} else if (!is.null(db_path) || !is.null(db_name) || !is.null(prj_name) || !is.null(scenarios)) {
# create project if checks ok
# check that all the paths are specified
if (is.null(db_path) || is.null(db_name) || is.null(prj_name) || is.null(scenarios)) {
null_items = c()
not_null_items = c()
for (item in c('db_path','db_name','prj_name','scenarios')) {
if (is.null(eval(parse(text=item)))) {
null_items = c(null_items, item)
} else {
not_null_items = c(not_null_items, item)
}
}
# stop and display error
if (length(not_null_items) > 1) {
stop("If ", paste(not_null_items, collapse = ', '), " are specified, ", paste(null_items, collapse = ', '), " must also be specified.")
} else {
stop("If ", paste(not_null_items, collapse = ', '), " is specified, ", paste(null_items, collapse = ', '), " must also be specified.")
}
} else {
# create project
create_project(db_path, db_name, prj_name, scenarios,
desired_regions, desired_variables)
}
} else {
# stop and display error
stop('ERROR: Specify either a project or a database to extract the data from.')
}
# make final_db_year as a global variable
final_db_year <<- final_year
# final reporting columns
reporting_columns_fin <<- append(c("Model", "Scenario", "Region", "Variable", "Unit"), as.character(seq(2005, final_db_year, by = 5)))
# desired variables to have in the report
variables_base <- data.frame('name' = unique(template$Internal_variable)[!is.na(unique(template$Internal_variable)) & unique(template$Internal_variable) != ""],
'required' = TRUE,
stringsAsFactors = FALSE)
# consider only the desired variables
if (length(desired_variables) == 1 && desired_variables == 'All') {
variables <<- variables_base
} else {
variables <<- variables_base %>%
dplyr::mutate(required = dplyr::if_else(
!name %in% unique(template %>%
dplyr::filter(Variable %in% desired_variables) %>%
dplyr::pull(Internal_variable)),
FALSE, required))
}
print('Loading data, performing checks, and saving output...')
# consider the dependencies and checking functions
variables <<- merge(variables,var_fun_map, by = 'name', all = TRUE) %>%
tidyr::replace_na(list(required = FALSE))
# for all desired variables, load the corresponding data
loaded_internal_variables <<- c()
desired_regions <<- desired_regions
desired_variables <<- desired_variables
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
ghg_sector_clean <<-
rgcam::getQuery(prj, "nonCO2 emissions by sector (excluding resource production)")  %>%
dplyr::filter(!grepl("CO2", ghg), !grepl("CO2_ETS", ghg)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "nonCO2 emissions by resource production") %>%
dplyr::rename(sector = resource) %>%
dplyr::select(-subresource)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "CO2 emissions by sector (no bio) (excluding resource production)") %>%
dplyr::mutate(ghg = "CO2")) %>%
dplyr::mutate(subsector = sector) %>%
conv_ghg_co2e() %>%
dplyr::filter(variable %in% GHG_gases) %>%
dplyr::rename(ghg = variable) %>%
dplyr::left_join(filter_variables(kyoto_sector_map, 'ghg_sector_clean'), relationship = "many-to-many") %>%
dplyr::select(all_of(long_columns)) %>%
dplyr::bind_rows(LU_carbon_clean %>%
dplyr::mutate(var = "Emissions|Kyoto Gases"),
LU_carbon_clean %>%
dplyr::mutate(var = "Emissions|Kyoto Gases|AFOLU")) %>%
dplyr::group_by(scenario, region, var, year) %>%
dplyr::summarise(value = sum(value, na.rm = T)) %>%
dplyr::ungroup()
rgcam::getQuery(prj, "nonCO2 emissions by sector (excluding resource production)")  %>%
dplyr::filter(!grepl("CO2", ghg), !grepl("CO2_ETS", ghg)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "nonCO2 emissions by resource production") %>%
dplyr::rename(sector = resource) %>%
dplyr::select(-subresource)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "CO2 emissions by sector (no bio) (excluding resource production)") %>%
dplyr::mutate(ghg = "CO2")) %>%
dplyr::mutate(subsector = sector) %>%
conv_ghg_co2e() %>%
dplyr::filter(variable %in% GHG_gases) %>%
dplyr::rename(ghg = variable)
rgcam::getQuery(prj, "nonCO2 emissions by sector (excluding resource production)")  %>%
dplyr::filter(!grepl("CO2", ghg), !grepl("CO2_ETS", ghg)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "nonCO2 emissions by resource production") %>%
dplyr::rename(sector = resource) %>%
dplyr::select(-subresource)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "CO2 emissions by sector (no bio) (excluding resource production)") %>%
dplyr::mutate(ghg = "CO2")) %>%
dplyr::mutate(subsector = sector) %>%
conv_ghg_co2e() %>%
dplyr::filter(variable %in% GHG_gases) %>%
dplyr::rename(ghg = variable) %>%
dplyr::left_join(filter_variables(kyoto_sector_map, 'ghg_sector_clean'), relationship = "many-to-many")
rgcam::getQuery(prj, "nonCO2 emissions by sector (excluding resource production)")  %>%
dplyr::filter(!grepl("CO2", ghg), !grepl("CO2_ETS", ghg)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "nonCO2 emissions by resource production") %>%
dplyr::rename(sector = resource) %>%
dplyr::select(-subresource)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "CO2 emissions by sector (no bio) (excluding resource production)") %>%
dplyr::mutate(ghg = "CO2")) %>%
dplyr::mutate(subsector = sector) %>%
conv_ghg_co2e() %>%
dplyr::filter(variable %in% GHG_gases) %>%
dplyr::rename(ghg = variable) %>%
dplyr::left_join(filter_variables(kyoto_sector_map, 'ghg_sector_clean'))
ghg_sector_clean <<-
rgcam::getQuery(prj, "nonCO2 emissions by sector (excluding resource production)")  %>%
dplyr::filter(!grepl("CO2", ghg), !grepl("CO2_ETS", ghg)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "nonCO2 emissions by resource production") %>%
dplyr::rename(sector = resource) %>%
dplyr::select(-subresource)) %>%
dplyr::bind_rows(rgcam::getQuery(prj, "CO2 emissions by sector (no bio) (excluding resource production)") %>%
dplyr::mutate(ghg = "CO2")) %>%
dplyr::mutate(subsector = sector) %>%
conv_ghg_co2e() %>%
dplyr::filter(variable %in% GHG_gases) %>%
dplyr::rename(ghg = variable) %>%
dplyr::left_join(filter_variables(kyoto_sector_map, 'ghg_sector_clean')) %>%
dplyr::select(all_of(long_columns)) %>%
dplyr::bind_rows(LU_carbon_clean %>%
dplyr::mutate(var = "Emissions|Kyoto Gases"),
LU_carbon_clean %>%
dplyr::mutate(var = "Emissions|Kyoto Gases|AFOLU")) %>%
dplyr::group_by(scenario, region, var, year) %>%
dplyr::summarise(value = sum(value, na.rm = T)) %>%
dplyr::ungroup()
for (i in 1:nrow(variables)) {
if (variables$required[i]) {
load_variable(variables[i,])
}
}
# set the default output_file based on the project_path or the db_path & db_name
if (is.null(output_file)) {
if (!is.null(project_path)) {
output_file = gsub("\\.dat$", "", project_path)
output_file = paste0(output_file,'_standardized')
} else {
output_file = paste0(db_path, "/", gsub("\\.dat$", "", prj_name), '_standardized')
}
}
output_file = gsub("\\.dat$", "", project_path)
output_file = paste0(output_file,'_standardized')
# bind and save results
do_bind_results()
covr::package_coverage() -> x
covr::package_coverage() -> x
covr::codecov(
quiet = FALSE,
clean = FALSE,
install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
)
cat("coverage = ", percent_coverage(x), " %\n")
codecov(coverage = x)
library(covr)
cat("coverage = ", percent_coverage(x), " %\n")
codecov(coverage = x)
covr:::report(x, file = "coverage.xml")
covr:::report(x, file = "coverage.json")
covr::codecov(
quiet = FALSE,
clean = FALSE,
install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
)
covr::to_file(x, "codecov.json")
library(covr)
as.data.frame(x)
zero_coverage(x)
vignette("how_it_works", package = "covr")
x
covr:::report(x, file = "coverage.xml")
covr::to_cobertura(x, file = "coverage.xml")
codecov -f coverage.xml
devtools::load_all()
library(gcamreport)
library(gcamreport)
library(gcamreport)
dbpath <- "examples"
dbname <- "database_basexdb_ref"
scen <- "Reference"
prjname <- "example1.dat"
generate_report(db_path = dbpath, db_name = dbname, scenarios = scen, prj_name = prjname, final_year = 2050, desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agriculture*'), save_output = TRUE, launch_ui = TRUE)
generate_report(db_path = dbpath, db_name = dbname, scenarios = scen, prj_name = prjname, final_year = 2050, desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'), save_output = TRUE, launch_ui = TRUE)
projectpath <- "examples/example2.dat"
generate_report(project_path = projectpath, final_year = 2050, save_output = TRUE, launch_ui = TRUE)
rm(list = ls())
library(gcamreport)
projectpath <- "examples/example2.dat"
generate_report(project_path = projectpath, final_year = 2050, save_output = TRUE, launch_ui = TRUE)
rm(list = ls())
library(gcamreport)
## -- store the database path, name, and scenarios in a variable.
projectpath <- "examples/example2.dat"
## -- generate the reporting dataset until 2050 for EU-12 and EU-15 for all the Agricultural variables,
## -- save the output in .RData, .csv and .xlsx format, and lunch the user interface
generate_report(project_path = projectpath, final_year = 2050, desired_regions = c('EU-12', 'EU-15'),
desired_variables = c('Agricultural*'), save_output = TRUE, launch_ui = TRUE)
datapath <- "examples/example3.dat"
launch_gcamreport_ui(data_path = datapath)
datapath <- "examples/example3.RData"
launch_gcamreport_ui(data_path = datapath)
